/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 05 21:34:27 GMT 2018
 */

package com.actionbarsherlock.internal.nineoldandroids.animation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import android.app.ListActivity;
import android.content.ContextWrapper;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.PatternMatcher;
import android.view.animation.AnticipateInterpolator;
import android.view.animation.AnticipateOvershootInterpolator;
import android.view.animation.CycleInterpolator;
import android.view.animation.DecelerateInterpolator;
import android.view.animation.Interpolator;
import com.actionbarsherlock.internal.nineoldandroids.animation.Animator;
import com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet;
import com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe;
import com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet;
import com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator;
import com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder;
import com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator;
import com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator;
import com.actionbarsherlock.internal.widget.ActionBarContextView;
import java.time.DayOfWeek;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AnimatorSet_ESTest extends AnimatorSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.clone();
      animatorSet1.setStartDelay(6L);
      animatorSet1.getListeners();
      animatorSet0.mListeners = null;
      animatorSet0.getChildAnimations();
      animatorSet1.getStartDelay();
      CycleInterpolator cycleInterpolator0 = null;
      try {
        cycleInterpolator0 = new CycleInterpolator((-565.98F));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.view.animation.CycleInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      animatorSet0.clone();
      animatorSet0.setStartDelay((-149L));
      AnimatorSet animatorSet1 = animatorSet0.clone();
      AnimatorSet animatorSet2 = animatorSet1.setDuration(819L);
      animatorSet2.clone();
      // Undeclared exception!
      try { 
        Parcel.obtain();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.os.Parcel", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.setDuration(296L);
      AnimatorSet animatorSet2 = animatorSet1.clone();
      animatorSet2.setTarget(animatorSet1);
      animatorSet2.setupEndValues();
      animatorSet1.start();
      animatorSet0.isStarted();
      AnimatorSet animatorSet3 = new AnimatorSet();
      animatorSet1.setTarget(animatorSet3);
      animatorSet0.removeAllListeners();
      animatorSet0.play(animatorSet2);
      HashSet<Animator> hashSet0 = new HashSet<Animator>();
      animatorSet3.play(animatorSet0);
      animatorSet0.playTogether((Collection<Animator>) hashSet0);
      animatorSet3.start();
      animatorSet3.setupEndValues();
      // Undeclared exception!
      try { 
        animatorSet3.setDuration((-568L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duration must be a value of zero or greater
         //
         verifyException("com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.clone();
      assertEquals((-1L), animatorSet1.getDuration());
      
      AnimatorSet animatorSet2 = animatorSet1.setDuration(0L);
      Vector<Animator> vector0 = new Vector<Animator>();
      animatorSet0.playSequentially((List<Animator>) vector0);
      animatorSet2.cancel();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      animatorSet1.isStarted();
      animatorSet1.setTarget(arrayList0);
      animatorSet2.setupStartValues();
      AnimatorSet animatorSet3 = animatorSet2.setDuration(0L);
      AnimatorSet.Builder animatorSet_Builder0 = animatorSet2.new Builder(animatorSet0);
      AnimatorSet.Builder animatorSet_Builder1 = animatorSet_Builder0.before(animatorSet0);
      animatorSet_Builder1.before(animatorSet0);
      assertFalse(animatorSet0.isStarted());
      
      Keyframe keyframe0 = Keyframe.ofInt((float) 0L, (-819));
      keyframe0.clone();
      keyframe0.getInterpolator();
      animatorSet3.setInterpolator((Interpolator) null);
      animatorSet3.end();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      animatorSet0.start();
      long long0 = 2302L;
      animatorSet0.setStartDelay(2302L);
      AnimatorSet animatorSet1 = animatorSet0.setDuration(2302L);
      animatorSet1.setupEndValues();
      animatorSet0.clone();
      // Undeclared exception!
      try { 
        animatorSet1.start();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator
         //
         verifyException("com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.setDuration(0L);
      AnimatorSet animatorSet2 = animatorSet1.clone();
      animatorSet2.getStartDelay();
      animatorSet1.play(animatorSet2);
      animatorSet2.setupStartValues();
      animatorSet0.clone();
      Animator[] animatorArray0 = new Animator[7];
      int[] intArray0 = new int[7];
      intArray0[0] = (-960);
      intArray0[1] = 0;
      intArray0[2] = 1604;
      intArray0[3] = 0;
      intArray0[4] = 196608;
      intArray0[5] = 2369;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        ValueAnimator.ofInt(intArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      animatorSet0.start();
      Animator[] animatorArray0 = new Animator[6];
      animatorArray0[0] = (Animator) animatorSet0;
      animatorArray0[1] = (Animator) animatorSet0;
      animatorArray0[2] = (Animator) animatorSet0;
      animatorArray0[3] = (Animator) animatorSet0;
      animatorArray0[4] = (Animator) animatorSet0;
      animatorArray0[5] = (Animator) animatorSet0;
      animatorSet0.playTogether(animatorArray0);
      Animator[] animatorArray1 = new Animator[0];
      animatorSet0.playSequentially(animatorArray1);
      assertEquals((-1L), animatorSet0.getDuration());
      assertEquals(0L, animatorSet0.getStartDelay());
      assertFalse(animatorSet0.isStarted());
      
      // Undeclared exception!
      try { 
        animatorSet0.playTogether(animatorArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      animatorSet0.isStarted();
      animatorSet0.cancel();
      animatorSet0.setupStartValues();
      animatorSet0.setStartDelay((-41L));
      AnimatorSet animatorSet1 = animatorSet0.setDuration(2283L);
      animatorSet1.getChildAnimations();
      AnimatorSet.Builder animatorSet_Builder0 = animatorSet0.play(animatorSet1);
      AnimatorSet.Builder animatorSet_Builder1 = animatorSet_Builder0.with(animatorSet1);
      animatorSet_Builder1.before(animatorSet1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      animatorSet0.setupEndValues();
      animatorSet0.getStartDelay();
      Integer integer0 = new Integer((-835));
      Integer.compare((-2146818173), 3771);
      Integer.max((-2960), (-835));
      animatorSet0.play((Animator) null);
      // Undeclared exception!
      try { 
        ObjectAnimator.ofFloat((Object) integer0, "'g(@xa-[ 6!a5R-~", (float[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.setDuration(115L);
      animatorSet1.setDuration(115L);
      animatorSet1.setupStartValues();
      AnimatorSet animatorSet2 = animatorSet0.clone();
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      KeyframeSet keyframeSet0 = KeyframeSet.ofFloat(floatArray0);
      Interpolator interpolator0 = keyframeSet0.mInterpolator;
      animatorSet2.setInterpolator((Interpolator) null);
      AnimatorSet animatorSet3 = animatorSet0.clone();
      LinkedList<Animator> linkedList0 = new LinkedList<Animator>();
      linkedList0.add((Animator) animatorSet2);
      animatorSet3.playTogether((Collection<Animator>) linkedList0);
      animatorSet1.setupEndValues();
      animatorSet0.start();
      animatorSet1.getStartDelay();
      animatorSet3.setDuration(0L);
      TypeEvaluator<String> typeEvaluator0 = (TypeEvaluator<String>) mock(TypeEvaluator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) keyframeSet0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) animatorSet0;
      objectArray0[3] = (Object) animatorSet1;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) animatorSet1;
      objectArray0[6] = (Object) animatorSet0;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) animatorSet2;
      // Undeclared exception!
      try { 
        ValueAnimator.ofObject(typeEvaluator0, objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      animatorSet0.setupStartValues();
      animatorSet0.setupEndValues();
      animatorSet0.isRunning();
      animatorSet0.setStartDelay((-3645L));
      animatorSet0.setupEndValues();
      animatorSet0.cancel();
      animatorSet0.start();
      animatorSet0.setupStartValues();
      animatorSet0.end();
      PropertyValuesHolder[] propertyValuesHolderArray0 = new PropertyValuesHolder[7];
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = (-2145775227);
      intArray0[2] = (-2145396685);
      intArray0[3] = 2;
      intArray0[4] = (-2146437115);
      intArray0[5] = 2140253063;
      PropertyValuesHolder propertyValuesHolder0 = PropertyValuesHolder.ofInt("", intArray0);
      propertyValuesHolderArray0[0] = propertyValuesHolder0;
      PropertyValuesHolder propertyValuesHolder1 = propertyValuesHolderArray0[0].clone();
      propertyValuesHolderArray0[1] = propertyValuesHolder1;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) (-2146437115);
      floatArray0[2] = (float) (-2145775227);
      floatArray0[3] = (float) 2140253063;
      floatArray0[4] = (float) (-2145396685);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) (-3645L);
      PropertyValuesHolder propertyValuesHolder2 = PropertyValuesHolder.ofFloat("", floatArray0);
      propertyValuesHolderArray0[2] = propertyValuesHolder2;
      PropertyValuesHolder propertyValuesHolder3 = PropertyValuesHolder.ofInt("", intArray0);
      propertyValuesHolderArray0[3] = propertyValuesHolder3;
      TypeEvaluator<Object> typeEvaluator0 = (TypeEvaluator<Object>) mock(TypeEvaluator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) propertyValuesHolder1;
      objectArray0[1] = (Object) propertyValuesHolder1;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) (-2.14577523E9F);
      objectArray0[4] = (Object) 2.14025306E9F;
      PropertyValuesHolder propertyValuesHolder4 = PropertyValuesHolder.ofObject("", typeEvaluator0, objectArray0);
      propertyValuesHolderArray0[4] = propertyValuesHolder4;
      TypeEvaluator<DayOfWeek> typeEvaluator1 = (TypeEvaluator<DayOfWeek>) mock(TypeEvaluator.class, new ViolatedAssumptionAnswer());
      PropertyValuesHolder propertyValuesHolder5 = PropertyValuesHolder.ofObject("", typeEvaluator1, propertyValuesHolderArray0);
      propertyValuesHolderArray0[5] = propertyValuesHolder5;
      TypeEvaluator<PatternMatcher> typeEvaluator2 = (TypeEvaluator<PatternMatcher>) mock(TypeEvaluator.class, new ViolatedAssumptionAnswer());
      PropertyValuesHolder propertyValuesHolder6 = PropertyValuesHolder.ofObject((String) null, typeEvaluator2, objectArray0);
      propertyValuesHolderArray0[6] = propertyValuesHolder6;
      // Undeclared exception!
      try { 
        ObjectAnimator.ofPropertyValuesHolder((Object) animatorSet0, propertyValuesHolderArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      animatorSet0.setupEndValues();
      AnimatorSet animatorSet1 = animatorSet0.setDuration(0L);
      animatorSet1.getDuration();
      AnimatorSet animatorSet2 = animatorSet0.setDuration(0L);
      animatorSet2.setupStartValues();
      animatorSet0.setStartDelay(0L);
      AnimatorSet animatorSet3 = animatorSet1.setDuration(0L);
      animatorSet3.isRunning();
      LinkedHashSet<Animator> linkedHashSet0 = new LinkedHashSet<Animator>();
      animatorSet1.playTogether((Collection<Animator>) linkedHashSet0);
      animatorSet2.setupStartValues();
      animatorSet0.playTogether((Collection<Animator>) linkedHashSet0);
      AnimatorSet.Builder animatorSet_Builder0 = animatorSet2.play(animatorSet3);
      // Undeclared exception!
      try { 
        animatorSet_Builder0.after(0L);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator
         //
         verifyException("com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      ArrayList<Animator> arrayList0 = animatorSet0.getChildAnimations();
      AnimatorSet animatorSet1 = animatorSet0.setDuration(3995L);
      animatorSet1.setTarget(animatorSet0);
      arrayList0.parallelStream();
      arrayList0.add((Animator) animatorSet0);
      animatorSet0.playSequentially((Animator[]) null);
      animatorSet0.end();
      AnimatorSet animatorSet2 = animatorSet1.setDuration(0L);
      arrayList0.add((Animator) animatorSet0);
      animatorSet2.setupStartValues();
      animatorSet2.playSequentially((List<Animator>) arrayList0);
      AnimatorSet.Builder animatorSet_Builder0 = animatorSet0.play(animatorSet2);
      // Undeclared exception!
      try { 
        animatorSet_Builder0.after(0L);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator
         //
         verifyException("com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      Animator[] animatorArray0 = new Animator[3];
      List<Animator> list0 = null;
      animatorSet0.mTerminated = false;
      animatorSet0.playSequentially((List<Animator>) null);
      // Undeclared exception!
      try { 
        animatorSet0.playSequentially(animatorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      animatorSet0.start();
      long long0 = 2302L;
      animatorSet0.setStartDelay(2302L);
      AnimatorSet animatorSet1 = animatorSet0.setDuration(2302L);
      animatorSet1.setupEndValues();
      animatorSet0.clone();
      HashSet<Animator> hashSet0 = new HashSet<Animator>();
      AnticipateOvershootInterpolator anticipateOvershootInterpolator0 = null;
      try {
        anticipateOvershootInterpolator0 = new AnticipateOvershootInterpolator();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.view.animation.AnticipateOvershootInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.setDuration(0L);
      AnimatorSet animatorSet2 = animatorSet1.clone();
      Animator[] animatorArray0 = new Animator[1];
      animatorArray0[0] = (Animator) animatorSet2;
      animatorSet2.playSequentially(animatorArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      animatorSet0.removeAllListeners();
      AnimatorSet animatorSet1 = animatorSet0.clone();
      animatorSet1.setupEndValues();
      animatorSet1.getChildAnimations();
      animatorSet0.setTarget(animatorSet1);
      animatorSet0.isStarted();
      animatorSet0.playSequentially((List<Animator>) null);
      AnimatorSet.Builder animatorSet_Builder0 = animatorSet0.new Builder(animatorSet1);
      // Undeclared exception!
      try { 
        animatorSet_Builder0.after(0L);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator
         //
         verifyException("com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.clone();
      animatorSet1.setInterpolator((Interpolator) null);
      animatorSet1.cancel();
      Animator[] animatorArray0 = new Animator[2];
      animatorArray0[0] = (Animator) animatorSet1;
      animatorSet0.playSequentially((List<Animator>) null);
      animatorSet0.playSequentially(animatorArray0);
      animatorSet0.getChildAnimations();
      animatorSet1.setTarget(animatorArray0[0]);
      animatorSet1.playTogether(animatorArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.clone();
      animatorSet0.start();
      AnimatorSet animatorSet2 = animatorSet1.setDuration(1L);
      animatorSet0.play(animatorSet2);
      animatorSet0.getChildAnimations();
      AnimatorSet.Builder animatorSet_Builder0 = animatorSet2.new Builder(animatorSet0);
      animatorSet1.getStartDelay();
      animatorSet0.isStarted();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      ArrayList<Animator> arrayList0 = animatorSet0.getChildAnimations();
      Animator[] animatorArray0 = new Animator[8];
      animatorArray0[0] = (Animator) animatorSet0;
      arrayList0.add(animatorArray0[0]);
      animatorArray0[1] = (Animator) animatorSet0;
      animatorArray0[2] = (Animator) animatorSet0;
      animatorArray0[3] = (Animator) animatorSet0;
      animatorArray0[4] = (Animator) animatorSet0;
      animatorArray0[5] = (Animator) animatorSet0;
      animatorArray0[6] = (Animator) animatorSet0;
      animatorArray0[7] = (Animator) animatorSet0;
      animatorSet0.playSequentially(animatorArray0);
      animatorSet0.playSequentially((List<Animator>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.setDuration(0L);
      AnimatorSet animatorSet2 = animatorSet1.clone();
      animatorSet2.getStartDelay();
      AnimatorSet.Builder animatorSet_Builder0 = animatorSet1.play(animatorSet2);
      AnimatorSet.Builder animatorSet_Builder1 = animatorSet_Builder0.with(animatorSet2);
      animatorSet_Builder1.before(animatorSet2);
      animatorSet2.setupStartValues();
      animatorSet0.clone();
      Animator[] animatorArray0 = new Animator[7];
      int[] intArray0 = new int[7];
      intArray0[0] = (-960);
      intArray0[1] = 0;
      intArray0[2] = 1604;
      intArray0[3] = 0;
      intArray0[4] = 196608;
      intArray0[5] = 2369;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        ValueAnimator.ofInt(intArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.setDuration(1167L);
      AnimatorSet animatorSet2 = animatorSet1.clone();
      animatorSet2.getDuration();
      animatorSet2.setupEndValues();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.setDuration(8L);
      AnimatorSet animatorSet2 = animatorSet1.clone();
      animatorSet2.isStarted();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      ArrayList<Animator.AnimatorListener> arrayList0 = new ArrayList<Animator.AnimatorListener>();
      animatorSet0.mListeners = arrayList0;
      animatorSet0.start();
      // Undeclared exception!
      try { 
        arrayList0.subList(2000, 2000);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 2000
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.clone();
      AnimatorSet animatorSet2 = animatorSet1.setDuration(1L);
      Collection<Animator> collection0 = null;
      animatorSet1.playTogether((Collection<Animator>) null);
      animatorSet2.removeListener((Animator.AnimatorListener) null);
      animatorSet2.play(animatorSet0);
      animatorSet0.addListener((Animator.AnimatorListener) null);
      animatorSet2.isRunning();
      // Undeclared exception!
      try { 
        animatorSet0.start();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.setDuration(0L);
      AnimatorSet animatorSet2 = animatorSet1.clone();
      Stack<Animator> stack0 = new Stack<Animator>();
      animatorSet0.playSequentially((List<Animator>) stack0);
      animatorSet2.setTarget(animatorSet0);
      animatorSet2.isRunning();
      AnimatorSet.Builder animatorSet_Builder0 = animatorSet2.new Builder(animatorSet0);
      AnimatorSet.Builder animatorSet_Builder1 = animatorSet_Builder0.with(animatorSet1);
      AnimatorSet.Builder animatorSet_Builder2 = animatorSet_Builder1.before(animatorSet2);
      AnimatorSet.Builder animatorSet_Builder3 = animatorSet_Builder2.after((Animator) animatorSet0);
      // Undeclared exception!
      try { 
        animatorSet_Builder3.after(0L);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator
         //
         verifyException("com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      LinkedList<Animator> linkedList0 = new LinkedList<Animator>();
      animatorSet0.playTogether((Collection<Animator>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.clone();
      Animator[] animatorArray0 = new Animator[2];
      // Undeclared exception!
      try { 
        animatorSet1.playTogether(animatorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      animatorSet0.getDuration();
      animatorSet0.start();
      animatorSet0.cancel();
      Animator animator0 = null;
      animatorSet0.play((Animator) null);
      Animator[] animatorArray0 = new Animator[4];
      animatorArray0[0] = null;
      ObjectAnimator objectAnimator0 = null;
      try {
        objectAnimator0 = new ObjectAnimator();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      ArrayDeque<Animator> arrayDeque0 = new ArrayDeque<Animator>();
      arrayDeque0.add(animatorSet0);
      arrayDeque0.add(animatorSet0);
      arrayDeque0.add(animatorSet0);
      animatorSet0.playTogether((Collection<Animator>) arrayDeque0);
      // Undeclared exception!
      try { 
        animatorSet0.clone();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.clone();
      animatorSet0.cancel();
      AnimatorSet animatorSet2 = animatorSet1.setDuration(2302L);
      animatorSet2.setupEndValues();
      animatorSet2.end();
      animatorSet1.play(animatorSet0);
      animatorSet2.isStarted();
      PriorityQueue<Animator> priorityQueue0 = new PriorityQueue<Animator>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.stream();
      priorityQueue0.containsAll(linkedHashSet0);
      priorityQueue0.add(animatorSet0);
      animatorSet1.playTogether((Collection<Animator>) priorityQueue0);
      animatorSet0.getStartDelay();
      animatorSet1.cancel();
      animatorSet0.end();
      animatorSet1.setupStartValues();
      AnticipateInterpolator anticipateInterpolator0 = null;
      try {
        anticipateInterpolator0 = new AnticipateInterpolator(2302L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.view.animation.AnticipateInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.setDuration(0L);
      AnimatorSet animatorSet2 = animatorSet1.clone();
      animatorSet2.setStartDelay(0L);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.clone();
      AnimatorSet animatorSet2 = animatorSet1.setDuration(0L);
      animatorSet2.playSequentially((Animator[]) null);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.setDuration(0L);
      AnimatorSet animatorSet2 = animatorSet1.clone();
      animatorSet2.setupEndValues();
      animatorSet0.cancel();
      animatorSet0.play(animatorSet1);
      animatorSet0.play(animatorSet1);
      // Undeclared exception!
      try { 
        animatorSet1.clone();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      Animator[] animatorArray0 = new Animator[7];
      AnimatorSet animatorSet1 = animatorSet0.clone();
      animatorSet0.play(animatorSet1);
      animatorArray0[0] = (Animator) animatorSet0;
      animatorArray0[1] = (Animator) animatorSet0;
      animatorArray0[2] = (Animator) animatorSet0;
      animatorArray0[3] = (Animator) animatorSet0;
      animatorArray0[4] = (Animator) animatorSet0;
      animatorArray0[5] = (Animator) animatorSet0;
      animatorArray0[6] = (Animator) animatorSet0;
      animatorSet0.playTogether(animatorArray0);
      // Undeclared exception!
      try { 
        animatorSet0.start();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Circular dependencies cannot exist in AnimatorSet
         //
         verifyException("com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.clone();
      AnimatorSet animatorSet2 = animatorSet1.setDuration(0L);
      Animator[] animatorArray0 = new Animator[4];
      animatorArray0[0] = (Animator) animatorSet1;
      animatorArray0[1] = (Animator) animatorSet1;
      animatorArray0[2] = (Animator) animatorSet2;
      animatorArray0[3] = (Animator) animatorSet0;
      animatorSet2.playSequentially(animatorArray0);
      animatorSet2.play(animatorSet1);
      // Undeclared exception!
      try { 
        animatorSet2.start();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Circular dependencies cannot exist in AnimatorSet
         //
         verifyException("com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.clone();
      animatorSet1.setStartDelay(0L);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      animatorSet0.cancel();
      Animator[] animatorArray0 = new Animator[2];
      animatorArray0[0] = (Animator) animatorSet0;
      animatorArray0[1] = (Animator) animatorSet0;
      animatorSet0.playSequentially(animatorArray0);
      // Undeclared exception!
      try { 
        animatorSet0.clone();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      ArrayList<Animator> arrayList0 = animatorSet0.getChildAnimations();
      int int0 = (-579);
      Stack<AnimatorSet> stack0 = new Stack<AnimatorSet>();
      // Undeclared exception!
      try { 
        arrayList0.addAll((-579), (Collection<? extends Animator>) stack0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -579, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.clone();
      long long0 = (-1970L);
      // Undeclared exception!
      try { 
        animatorSet1.setDuration((-1970L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duration must be a value of zero or greater
         //
         verifyException("com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.clone();
      long long0 = animatorSet1.getDuration();
      assertEquals((-1L), long0);
      assertFalse(animatorSet1.isStarted());
      
      ArrayList<Animator> arrayList0 = animatorSet0.getChildAnimations();
      assertEquals(0L, animatorSet0.getStartDelay());
      assertNotNull(arrayList0);
      assertFalse(animatorSet0.isStarted());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      // Undeclared exception!
      try { 
        animatorSet0.setDuration((-881L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duration must be a value of zero or greater
         //
         verifyException("com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      animatorSet0.setupEndValues();
      animatorSet0.setupStartValues();
      Vector<Animator> vector0 = new Vector<Animator>();
      animatorSet0.playSequentially((List<Animator>) vector0);
      animatorSet0.cancel();
      assertEquals((-1L), animatorSet0.getDuration());
      assertFalse(animatorSet0.isStarted());
      assertEquals(0L, animatorSet0.getStartDelay());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      animatorSet0.setupEndValues();
      animatorSet0.playTogether((Collection<Animator>) null);
      AnimatorSet animatorSet1 = animatorSet0.clone();
      animatorSet1.setupStartValues();
      animatorSet1.end();
      AnimatorSet.Builder animatorSet_Builder0 = animatorSet1.play(animatorSet0);
      animatorSet_Builder0.after((Animator) animatorSet1);
      animatorSet_Builder0.before(animatorSet1);
      animatorSet_Builder0.with(animatorSet1);
      animatorSet1.play(animatorSet0);
      assertFalse(animatorSet1.isStarted());
      assertEquals(0L, animatorSet1.getStartDelay());
      assertEquals((-1L), animatorSet1.getDuration());
      assertFalse(animatorSet0.isStarted());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.setDuration(2181L);
      Animator[] animatorArray0 = new Animator[3];
      animatorArray0[0] = (Animator) animatorSet1;
      animatorArray0[1] = (Animator) animatorSet1;
      animatorArray0[2] = (Animator) animatorSet0;
      animatorSet1.playSequentially(animatorArray0);
      assertEquals(2181L, animatorSet0.getDuration());
      assertEquals(0L, animatorSet0.getStartDelay());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.clone();
      AnimatorSet animatorSet2 = animatorSet1.setDuration(2996L);
      AnimatorSet.Builder animatorSet_Builder0 = animatorSet2.play(animatorSet0);
      AnimatorSet.Builder animatorSet_Builder1 = animatorSet_Builder0.with(animatorSet1);
      animatorSet_Builder1.before(animatorSet0);
      assertEquals(2996L, animatorSet1.getDuration());
      assertEquals((-1L), animatorSet0.getDuration());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.clone();
      AnimatorSet animatorSet2 = animatorSet1.setDuration(1L);
      animatorSet2.end();
      assertEquals(1L, animatorSet1.getDuration());
      assertEquals((-1L), animatorSet0.getDuration());
      assertFalse(animatorSet0.isStarted());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.setDuration(100L);
      animatorSet1.setupEndValues();
      assertEquals(100L, animatorSet0.getDuration());
      assertEquals(0L, animatorSet0.getStartDelay());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.setDuration(3783L);
      animatorSet1.play(animatorSet0);
      assertEquals(3783L, animatorSet0.getDuration());
      assertEquals(0L, animatorSet0.getStartDelay());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      boolean boolean0 = animatorSet0.isRunning();
      assertFalse(boolean0);
      
      animatorSet0.end();
      Object object0 = new Object();
      animatorSet0.setTarget(object0);
      assertFalse(animatorSet0.isStarted());
      assertEquals((-1L), animatorSet0.getDuration());
      assertEquals(0L, animatorSet0.getStartDelay());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.clone();
      animatorSet1.setInterpolator((Interpolator) null);
      long long0 = animatorSet1.getDuration();
      assertFalse(animatorSet1.isStarted());
      assertEquals((-1L), long0);
      
      Animator[] animatorArray0 = new Animator[2];
      animatorArray0[0] = (Animator) animatorSet1;
      animatorArray0[1] = (Animator) animatorSet0;
      animatorSet0.playSequentially(animatorArray0);
      assertFalse(animatorSet0.isStarted());
      assertEquals(0L, animatorSet0.getStartDelay());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      long long0 = 296L;
      AnimatorSet animatorSet1 = animatorSet0.setDuration(296L);
      AnimatorSet animatorSet2 = animatorSet1.clone();
      animatorSet2.setTarget(animatorSet1);
      animatorSet2.setupEndValues();
      animatorSet1.start();
      animatorSet0.isStarted();
      AnimatorSet animatorSet3 = animatorSet2.clone();
      animatorSet1.setTarget(animatorSet3);
      animatorSet0.removeAllListeners();
      HashSet<Animator> hashSet0 = new HashSet<Animator>();
      animatorSet3.play(animatorSet0);
      animatorSet0.playTogether((Collection<Animator>) hashSet0);
      animatorSet3.start();
      animatorSet3.setupEndValues();
      long long1 = (-568L);
      // Undeclared exception!
      try { 
        animatorSet3.setDuration((-568L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duration must be a value of zero or greater
         //
         verifyException("com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.clone();
      animatorSet0.getChildAnimations();
      animatorSet0.removeAllListeners();
      ArrayList<Animator> arrayList0 = new ArrayList<Animator>();
      arrayList0.add((Animator) animatorSet0);
      arrayList0.listIterator();
      arrayList0.add((Animator) animatorSet1);
      animatorSet0.cancel();
      animatorSet1.playTogether((Collection<Animator>) arrayList0);
      animatorSet0.setupStartValues();
      animatorSet0.setupStartValues();
      animatorSet0.end();
      animatorSet1.cancel();
      float float0 = 2933.896F;
      DecelerateInterpolator decelerateInterpolator0 = null;
      try {
        decelerateInterpolator0 = new DecelerateInterpolator(2933.896F);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.view.animation.DecelerateInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.clone();
      AnimatorSet.Builder animatorSet_Builder0 = animatorSet1.new Builder(animatorSet1);
      // Undeclared exception!
      try { 
        animatorSet1.start();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.clone();
      animatorSet1.removeAllListeners();
      animatorSet0.mTerminated = true;
      animatorSet0.end();
      animatorSet0.clone();
      animatorSet0.setupEndValues();
      animatorSet1.getStartDelay();
      animatorSet1.getStartDelay();
      AnimatorSet.Builder animatorSet_Builder0 = animatorSet0.new Builder(animatorSet1);
      AnimatorSet.Builder animatorSet_Builder1 = animatorSet_Builder0.after((Animator) animatorSet1);
      animatorSet_Builder0.before(animatorSet0);
      AnimatorSet.Builder animatorSet_Builder2 = animatorSet_Builder1.before(animatorSet1);
      animatorSet_Builder2.before(animatorSet0);
      // Undeclared exception!
      try { 
        animatorSet_Builder2.after(0L);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator
         //
         verifyException("com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet.Builder animatorSet_Builder0 = animatorSet0.new Builder(animatorSet0);
      AnimatorSet.Builder animatorSet_Builder1 = animatorSet_Builder0.after((Animator) animatorSet0);
      // Undeclared exception!
      try { 
        animatorSet_Builder1.after((-268L));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator
         //
         verifyException("com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      AnimatorSet animatorSet0 = new AnimatorSet();
      AnimatorSet animatorSet1 = animatorSet0.clone();
      animatorSet1.setInterpolator((Interpolator) null);
      animatorSet0.end();
      Animator[] animatorArray0 = new Animator[2];
      animatorArray0[0] = (Animator) animatorSet1;
      animatorSet0.playSequentially(animatorArray0);
      animatorSet1.mTerminated = true;
      ArrayList<Animator> arrayList0 = animatorSet0.getChildAnimations();
      animatorSet1.setTarget(animatorArray0[0]);
      arrayList0.add(animatorArray0[0]);
      animatorSet1.playTogether(animatorArray0);
      // Undeclared exception!
      try { 
        animatorSet0.playSequentially((List<Animator>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet", e);
      }
  }
}
