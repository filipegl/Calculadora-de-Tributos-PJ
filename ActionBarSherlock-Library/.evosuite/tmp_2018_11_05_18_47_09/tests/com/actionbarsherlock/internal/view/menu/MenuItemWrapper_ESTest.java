/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 05 22:34:41 GMT 2018
 */

package com.actionbarsherlock.internal.view.menu;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import android.content.Context;
import android.content.Intent;
import android.graphics.drawable.Drawable;
import android.view.ContextMenu;
import android.view.View;
import com.actionbarsherlock.internal.view.menu.MenuItemWrapper;
import com.actionbarsherlock.view.MenuItem;
import com.actionbarsherlock.view.SubMenu;
import com.actionbarsherlock.widget.ShareActionProvider;
import com.xtremelabs.robolectric.tester.android.view.TestMenuItem;
import com.xtremelabs.robolectric.tester.android.view.TestSubMenu;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MenuItemWrapper_ESTest extends MenuItemWrapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(1737);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      // Undeclared exception!
      try { 
        menuItemWrapper0.setActionView((-1628));
        fail("Expecting exception: AbstractMethodError");
      
      } catch(AbstractMethodError e) {
         //
         // com.xtremelabs.robolectric.tester.android.view.TestMenuItem.setActionView(I)Landroid/view/MenuItem;
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem();
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      MenuItem menuItem0 = menuItemWrapper0.setShortcut('{', '1');
      assertEquals(0, menuItem0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem((-1235));
      android.view.MenuItem menuItem0 = testMenuItem0.setEnabled(false);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(menuItem0);
      MenuItem menuItem1 = menuItemWrapper0.setVisible(false);
      assertFalse(menuItem1.isEnabled());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem((-1235));
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      TestSubMenu testSubMenu0 = new TestSubMenu();
      testMenuItem0.setSubMenu(testSubMenu0);
      MenuItem menuItem0 = menuItemWrapper0.setVisible(true);
      assertEquals('\u0000', menuItem0.getAlphabeticShortcut());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem();
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      MenuItem menuItem0 = menuItemWrapper0.setVisible(true);
      assertEquals(0, menuItem0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem((-1235));
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      testMenuItem0.setItemId(1);
      MenuItem menuItem0 = menuItemWrapper0.setVisible(false);
      assertSame(menuItemWrapper0, menuItem0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem((-1235));
      android.view.MenuItem menuItem0 = testMenuItem0.setEnabled(false);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(menuItem0);
      MenuItem menuItem1 = menuItemWrapper0.setTitleCondensed("wifip2p");
      assertFalse(menuItem1.isEnabled());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem();
      TestSubMenu testSubMenu0 = new TestSubMenu();
      testMenuItem0.setSubMenu(testSubMenu0);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      StringBuilder stringBuilder0 = new StringBuilder("Wrapped menu item cannot be null.");
      MenuItem menuItem0 = menuItemWrapper0.setTitleCondensed(stringBuilder0);
      assertEquals('\u0000', menuItem0.getNumericShortcut());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem();
      StringBuilder stringBuilder0 = new StringBuilder();
      testMenuItem0.setItemId(2967);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      MenuItem menuItem0 = menuItemWrapper0.setTitleCondensed(stringBuilder0);
      assertFalse(menuItem0.isCheckable());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem((-1235));
      android.view.MenuItem menuItem0 = testMenuItem0.setEnabled(false);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(menuItem0);
      MenuItem menuItem1 = menuItemWrapper0.setTitle((CharSequence) null);
      assertFalse(menuItem1.isCheckable());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem((-1235));
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      TestSubMenu testSubMenu0 = new TestSubMenu();
      testMenuItem0.setSubMenu(testSubMenu0);
      MenuItem menuItem0 = menuItemWrapper0.setTitle((CharSequence) null);
      assertFalse(menuItem0.isCheckable());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(0);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      menuItemWrapper0.setEnabled(false);
      menuItemWrapper0.setTitle(0);
      assertFalse(menuItemWrapper0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(0);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      TestSubMenu testSubMenu0 = new TestSubMenu();
      testMenuItem0.setSubMenu(testSubMenu0);
      MenuItem menuItem0 = menuItemWrapper0.setTitle(0);
      assertEquals('\u0000', menuItem0.getAlphabeticShortcut());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem();
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      testMenuItem0.setItemId(458752);
      MenuItem menuItem0 = menuItemWrapper0.setTitle(458752);
      assertTrue(menuItem0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem((-18));
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      MenuItem menuItem0 = menuItemWrapper0.setTitle((-18));
      assertEquals('\u0000', menuItem0.getAlphabeticShortcut());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem((-1235));
      android.view.MenuItem menuItem0 = testMenuItem0.setEnabled(false);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(menuItem0);
      MenuItem menuItem1 = menuItemWrapper0.setShortcut('D', 'D');
      assertFalse(menuItem1.isChecked());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem((-1235));
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      TestSubMenu testSubMenu0 = new TestSubMenu();
      testMenuItem0.setSubMenu(testSubMenu0);
      MenuItem menuItem0 = menuItemWrapper0.setShortcut('S', 'S');
      assertEquals('\u0000', menuItem0.getAlphabeticShortcut());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem((-1235));
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      testMenuItem0.setItemId(1);
      MenuItem menuItem0 = menuItemWrapper0.setShortcut('D', 'D');
      assertFalse(menuItem0.hasSubMenu());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem((-1235));
      android.view.MenuItem menuItem0 = testMenuItem0.setEnabled(false);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(menuItem0);
      MenuItem.OnMenuItemClickListener menuItem_OnMenuItemClickListener0 = mock(MenuItem.OnMenuItemClickListener.class, new ViolatedAssumptionAnswer());
      MenuItem menuItem1 = menuItemWrapper0.setOnMenuItemClickListener(menuItem_OnMenuItemClickListener0);
      assertEquals('\u0000', menuItem1.getNumericShortcut());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem((-1235));
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      TestSubMenu testSubMenu0 = new TestSubMenu();
      testMenuItem0.setSubMenu(testSubMenu0);
      MenuItem.OnMenuItemClickListener menuItem_OnMenuItemClickListener0 = mock(MenuItem.OnMenuItemClickListener.class, new ViolatedAssumptionAnswer());
      MenuItem menuItem0 = menuItemWrapper0.setOnMenuItemClickListener(menuItem_OnMenuItemClickListener0);
      assertFalse(menuItem0.isCheckable());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem();
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      MenuItem.OnMenuItemClickListener menuItem_OnMenuItemClickListener0 = mock(MenuItem.OnMenuItemClickListener.class, new ViolatedAssumptionAnswer());
      MenuItem menuItem0 = menuItemWrapper0.setOnMenuItemClickListener(menuItem_OnMenuItemClickListener0);
      assertFalse(menuItem0.isCheckable());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(0);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      menuItemWrapper0.setEnabled(false);
      menuItemWrapper0.setNumericShortcut('L');
      assertFalse(menuItemWrapper0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(0);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      TestSubMenu testSubMenu0 = new TestSubMenu();
      testMenuItem0.setSubMenu(testSubMenu0);
      MenuItem menuItem0 = menuItemWrapper0.setNumericShortcut('L');
      assertTrue(menuItem0.hasSubMenu());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(19);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      MenuItem menuItem0 = menuItemWrapper0.setNumericShortcut('L');
      assertFalse(menuItem0.isCheckable());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem((-1235));
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      MenuItem menuItem0 = menuItemWrapper0.setNumericShortcut('S');
      assertSame(menuItem0, menuItemWrapper0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(261);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      menuItemWrapper0.setEnabled(false);
      menuItemWrapper0.setIntent((Intent) null);
      assertFalse(menuItemWrapper0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(261);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      TestSubMenu testSubMenu0 = new TestSubMenu();
      testMenuItem0.setSubMenu(testSubMenu0);
      MenuItem menuItem0 = menuItemWrapper0.setIntent((Intent) null);
      assertSame(menuItemWrapper0, menuItem0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem();
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      MenuItem menuItem0 = menuItemWrapper0.setIntent((Intent) null);
      assertEquals(0, menuItem0.getItemId());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem((-1235));
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      MenuItem menuItem0 = menuItemWrapper0.setIntent((Intent) null);
      assertEquals(0, menuItem0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem((-1235));
      TestMenuItem testMenuItem1 = (TestMenuItem)testMenuItem0.setEnabled(false);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem1);
      menuItemWrapper0.setIcon(52);
      assertEquals(52, testMenuItem1.iconRes);
      assertEquals(52, testMenuItem0.iconRes);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem();
      TestSubMenu testSubMenu0 = new TestSubMenu();
      testMenuItem0.setSubMenu(testSubMenu0);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      menuItemWrapper0.setIcon((-1));
      assertEquals((-1), testMenuItem0.iconRes);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(261);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      TestSubMenu testSubMenu0 = new TestSubMenu();
      testMenuItem0.setSubMenu(testSubMenu0);
      menuItemWrapper0.setEnabled(false);
      assertFalse(menuItemWrapper0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(0);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      MenuItem menuItem0 = menuItemWrapper0.setEnabled(false);
      menuItem0.setChecked(false);
      assertFalse(menuItemWrapper0.isEnabled());
      assertFalse(testMenuItem0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem();
      TestSubMenu testSubMenu0 = new TestSubMenu();
      testMenuItem0.setSubMenu(testSubMenu0);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      MenuItem menuItem0 = menuItemWrapper0.setChecked(false);
      assertEquals('\u0000', menuItem0.getAlphabeticShortcut());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(261);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      MenuItem menuItem0 = menuItemWrapper0.setChecked(true);
      assertFalse(menuItem0.isCheckable());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem((-18));
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      MenuItem menuItem0 = menuItemWrapper0.setChecked(false);
      assertFalse(menuItem0.isCheckable());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem((-2261));
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      menuItemWrapper0.setEnabled(false);
      menuItemWrapper0.setCheckable(true);
      assertFalse(menuItemWrapper0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(261);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      TestSubMenu testSubMenu0 = new TestSubMenu();
      testMenuItem0.setSubMenu(testSubMenu0);
      MenuItem menuItem0 = menuItemWrapper0.setCheckable(false);
      assertSame(menuItemWrapper0, menuItem0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem();
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      MenuItem menuItem0 = menuItemWrapper0.setCheckable(true);
      assertEquals('\u0000', menuItem0.getNumericShortcut());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(261);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      menuItemWrapper0.setEnabled(false);
      menuItemWrapper0.setAlphabeticShortcut('g');
      assertFalse(menuItemWrapper0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(261);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      TestSubMenu testSubMenu0 = new TestSubMenu();
      testMenuItem0.setSubMenu(testSubMenu0);
      MenuItem menuItem0 = menuItemWrapper0.setAlphabeticShortcut('g');
      assertFalse(menuItem0.isCheckable());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(0);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      MenuItem menuItem0 = menuItemWrapper0.setAlphabeticShortcut('L');
      assertEquals('\u0000', menuItem0.getAlphabeticShortcut());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(261);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      MenuItem.OnMenuItemClickListener menuItem_OnMenuItemClickListener0 = mock(MenuItem.OnMenuItemClickListener.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(menuItem_OnMenuItemClickListener0).onMenuItemClick(any(com.actionbarsherlock.view.MenuItem.class));
      menuItemWrapper0.setOnMenuItemClickListener(menuItem_OnMenuItemClickListener0);
      boolean boolean0 = menuItemWrapper0.onMenuItemClick(testMenuItem0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(261);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      TestSubMenu testSubMenu0 = new TestSubMenu();
      testMenuItem0.setSubMenu(testSubMenu0);
      boolean boolean0 = menuItemWrapper0.hasSubMenu();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem();
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      StringBuffer stringBuffer0 = new StringBuffer("`Mucr*$AcOoD<g");
      menuItemWrapper0.setTitle((CharSequence) stringBuffer0);
      CharSequence charSequence0 = menuItemWrapper0.getTitle();
      assertSame(charSequence0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(261);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      TestSubMenu testSubMenu0 = new TestSubMenu();
      testSubMenu0.add((CharSequence) null);
      testMenuItem0.setSubMenu(testSubMenu0);
      SubMenu subMenu0 = menuItemWrapper0.getSubMenu();
      assertEquals(1, subMenu0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem();
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      int int0 = menuItemWrapper0.getItemId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem((-2894));
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      // Undeclared exception!
      try { 
        menuItemWrapper0.getActionProvider();
        fail("Expecting exception: AbstractMethodError");
      
      } catch(AbstractMethodError e) {
         //
         // com.xtremelabs.robolectric.tester.android.view.TestMenuItem.getActionProvider()Landroid/view/ActionProvider;
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem();
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      boolean boolean0 = menuItemWrapper0.onMenuItemClick(testMenuItem0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(1737);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      boolean boolean0 = menuItemWrapper0.hasSubMenu();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(261);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      TestSubMenu testSubMenu0 = new TestSubMenu();
      testMenuItem0.setSubMenu(testSubMenu0);
      menuItemWrapper0.getSubMenu();
      SubMenu subMenu0 = menuItemWrapper0.getSubMenu();
      assertEquals(0, subMenu0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MenuItemWrapper menuItemWrapper0 = null;
      try {
        menuItemWrapper0 = new MenuItemWrapper((android.view.MenuItem) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(261);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      MenuItem.OnActionExpandListener menuItem_OnActionExpandListener0 = mock(MenuItem.OnActionExpandListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        menuItemWrapper0.setOnActionExpandListener(menuItem_OnActionExpandListener0);
        fail("Expecting exception: AbstractMethodError");
      
      } catch(AbstractMethodError e) {
         //
         // com.xtremelabs.robolectric.tester.android.view.TestMenuItem.setOnActionExpandListener(Landroid/view/MenuItem$OnActionExpandListener;)Landroid/view/MenuItem;
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem((-2261));
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      // Undeclared exception!
      try { 
        menuItemWrapper0.isActionViewExpanded();
        fail("Expecting exception: AbstractMethodError");
      
      } catch(AbstractMethodError e) {
         //
         // com.xtremelabs.robolectric.tester.android.view.TestMenuItem.isActionViewExpanded()Z
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem((-1235));
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      int int0 = menuItemWrapper0.getOrder();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(261);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      boolean boolean0 = menuItemWrapper0.isVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(0);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      // Undeclared exception!
      try { 
        menuItemWrapper0.expandActionView();
        fail("Expecting exception: AbstractMethodError");
      
      } catch(AbstractMethodError e) {
         //
         // com.xtremelabs.robolectric.tester.android.view.TestMenuItem.expandActionView()Z
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(261);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      CharSequence charSequence0 = menuItemWrapper0.getTitle();
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(0);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      boolean boolean0 = menuItemWrapper0.isEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem();
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      boolean boolean0 = menuItemWrapper0.isChecked();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(261);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      MenuItem menuItem0 = menuItemWrapper0.setTitle((CharSequence) null);
      assertFalse(menuItem0.hasSubMenu());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(0);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      boolean boolean0 = menuItemWrapper0.isCheckable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem((-1235));
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      CharSequence charSequence0 = menuItemWrapper0.getTitleCondensed();
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem((-1235));
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      // Undeclared exception!
      try { 
        menuItemWrapper0.setShowAsAction(52);
        fail("Expecting exception: AbstractMethodError");
      
      } catch(AbstractMethodError e) {
         //
         // com.xtremelabs.robolectric.tester.android.view.TestMenuItem.setShowAsAction(I)V
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem();
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      // Undeclared exception!
      try { 
        menuItemWrapper0.setActionView((View) null);
        fail("Expecting exception: AbstractMethodError");
      
      } catch(AbstractMethodError e) {
         //
         // com.xtremelabs.robolectric.tester.android.view.TestMenuItem.setActionView(Landroid/view/View;)Landroid/view/MenuItem;
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(261);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      MenuItem menuItem0 = menuItemWrapper0.setEnabled(true);
      assertTrue(menuItem0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem();
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      MenuItem menuItem0 = menuItemWrapper0.setIcon((Drawable) null);
      assertFalse(menuItem0.isChecked());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem();
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      // Undeclared exception!
      try { 
        menuItemWrapper0.collapseActionView();
        fail("Expecting exception: AbstractMethodError");
      
      } catch(AbstractMethodError e) {
         //
         // com.xtremelabs.robolectric.tester.android.view.TestMenuItem.collapseActionView()Z
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem();
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      ShareActionProvider shareActionProvider0 = new ShareActionProvider((Context) null);
      // Undeclared exception!
      try { 
        menuItemWrapper0.setActionProvider(shareActionProvider0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.view.ActionProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(261);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      int int0 = menuItemWrapper0.getItemId();
      assertEquals(261, int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem();
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      ContextMenu.ContextMenuInfo contextMenu_ContextMenuInfo0 = menuItemWrapper0.getMenuInfo();
      assertNull(contextMenu_ContextMenuInfo0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(261);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      SubMenu subMenu0 = menuItemWrapper0.getSubMenu();
      assertNull(subMenu0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(261);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      char char0 = menuItemWrapper0.getNumericShortcut();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(261);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      // Undeclared exception!
      try { 
        menuItemWrapper0.getActionView();
        fail("Expecting exception: AbstractMethodError");
      
      } catch(AbstractMethodError e) {
         //
         // com.xtremelabs.robolectric.tester.android.view.TestMenuItem.getActionView()Landroid/view/View;
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(0);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      // Undeclared exception!
      try { 
        menuItemWrapper0.setShowAsActionFlags(3);
        fail("Expecting exception: AbstractMethodError");
      
      } catch(AbstractMethodError e) {
         //
         // com.xtremelabs.robolectric.tester.android.view.TestMenuItem.setShowAsActionFlags(I)Landroid/view/MenuItem;
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(0);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      char char0 = menuItemWrapper0.getAlphabeticShortcut();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(261);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      Intent intent0 = menuItemWrapper0.getIntent();
      assertNull(intent0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(261);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      int int0 = menuItemWrapper0.getGroupId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(0);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      Drawable drawable0 = menuItemWrapper0.getIcon();
      assertNull(drawable0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      TestMenuItem testMenuItem0 = new TestMenuItem(261);
      MenuItemWrapper menuItemWrapper0 = new MenuItemWrapper(testMenuItem0);
      menuItemWrapper0.setIcon(261);
      assertEquals(261, testMenuItem0.iconRes);
  }
}
