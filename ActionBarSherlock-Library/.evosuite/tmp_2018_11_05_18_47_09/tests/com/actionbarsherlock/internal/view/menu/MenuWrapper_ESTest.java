/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 05 22:44:02 GMT 2018
 */

package com.actionbarsherlock.internal.view.menu;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import android.content.ComponentName;
import android.content.Intent;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.SubMenu;
import com.actionbarsherlock.internal.view.menu.MenuWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MenuWrapper_ESTest extends MenuWrapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      SubMenu subMenu0 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0, menuItem0).when(subMenu0).getItem();
      MenuItem menuItem1 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem1).when(menu0).add(anyInt() , anyInt() , anyInt() , any(java.lang.CharSequence.class));
      doReturn(subMenu0).when(menu0).addSubMenu(any(java.lang.CharSequence.class));
      doReturn((MenuItem) null, (MenuItem) null).when(menu0).findItem(anyInt());
      doReturn(1).when(menu0).size();
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(1, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      int int0 = menuWrapper0.size();
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(1, menuWrapper0.size());
      assertEquals(1, int0);
      
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent[] intentArray0 = new Intent[5];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      intentArray0[0] = intent0;
      intentArray0[1] = intent0;
      intentArray0[2] = intent0;
      intentArray0[3] = intent0;
      intentArray0[4] = intent0;
      com.actionbarsherlock.view.SubMenu subMenu1 = menuWrapper0.addSubMenu((CharSequence) "android.intent.action.FACTORY_TEST");
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(1, menuWrapper0.size());
      assertTrue(subMenu1.hasVisibleItems());
      assertEquals((-290), subMenu1.size());
      assertNotNull(subMenu1);
      
      com.actionbarsherlock.view.MenuItem menuItem2 = menuWrapper0.add(1, (-1695), 134217728, (CharSequence) "android.intent.action.MEDIA_EJECT");
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(1, menuWrapper0.size());
      assertFalse(menuItem2.hasSubMenu());
      assertEquals('a', menuItem2.getNumericShortcut());
      assertFalse(menuItem2.expandActionView());
      assertEquals('a', menuItem2.getAlphabeticShortcut());
      assertFalse(menuItem2.isChecked());
      assertFalse(menuItem2.isVisible());
      assertFalse(menuItem2.collapseActionView());
      assertFalse(menuItem2.isEnabled());
      assertFalse(menuItem2.isActionViewExpanded());
      assertEquals(0, menuItem2.getGroupId());
      assertEquals(0, menuItem2.getOrder());
      assertEquals(0, menuItem2.getItemId());
      assertFalse(menuItem2.isCheckable());
      assertNotNull(menuItem2);
      
      com.actionbarsherlock.view.MenuItem menuItem3 = menuWrapper0.findItem((-2309));
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(1, menuWrapper0.size());
      assertNull(menuItem3);
      
      com.actionbarsherlock.view.MenuItem menuItem4 = menuWrapper0.findItem(0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(1, menuWrapper0.size());
      assertNull(menuItem4);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      SubMenu subMenu0 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0, menuItem0).when(subMenu0).getItem();
      MenuItem menuItem1 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem1).when(menu0).add(anyInt() , anyInt() , anyInt() , any(java.lang.CharSequence.class));
      doReturn(subMenu0).when(menu0).addSubMenu(any(java.lang.CharSequence.class));
      doReturn((MenuItem) null, (MenuItem) null).when(menu0).findItem(anyInt());
      doReturn(1).when(menu0).size();
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(1, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      int int0 = menuWrapper0.size();
      assertEquals(1, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(1, int0);
      
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent[] intentArray0 = new Intent[5];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      intentArray0[0] = intent0;
      intentArray0[1] = intent0;
      intentArray0[2] = intent0;
      intentArray0[3] = intent0;
      intentArray0[4] = intent0;
      com.actionbarsherlock.view.SubMenu subMenu1 = menuWrapper0.addSubMenu((CharSequence) "android.intent.action.FACTORY_TEST");
      assertEquals(1, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals((-763), subMenu1.size());
      assertFalse(subMenu1.hasVisibleItems());
      assertNotNull(subMenu1);
      
      com.actionbarsherlock.view.MenuItem menuItem2 = menuWrapper0.add(1, (-1695), 134217728, (CharSequence) "android.intent.action.MEDIA_EJECT");
      assertEquals(1, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuItem2.getItemId());
      assertFalse(menuItem2.isEnabled());
      assertFalse(menuItem2.isCheckable());
      assertFalse(menuItem2.hasSubMenu());
      assertFalse(menuItem2.collapseActionView());
      assertFalse(menuItem2.isVisible());
      assertFalse(menuItem2.expandActionView());
      assertEquals(0, menuItem2.getOrder());
      assertFalse(menuItem2.isChecked());
      assertEquals('a', menuItem2.getAlphabeticShortcut());
      assertEquals(0, menuItem2.getGroupId());
      assertEquals('a', menuItem2.getNumericShortcut());
      assertFalse(menuItem2.isActionViewExpanded());
      assertNotNull(menuItem2);
      
      com.actionbarsherlock.view.MenuItem menuItem3 = menuWrapper0.findItem((-2309));
      assertEquals(1, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNull(menuItem3);
      
      com.actionbarsherlock.view.MenuItem menuItem4 = menuWrapper0.findItem(0);
      assertEquals(1, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNull(menuItem4);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      SubMenu subMenu0 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0, menuItem0).when(subMenu0).getItem();
      MenuItem menuItem1 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem1).when(menu0).add(anyInt() , anyInt() , anyInt() , any(java.lang.CharSequence.class));
      doReturn(subMenu0).when(menu0).addSubMenu(any(java.lang.CharSequence.class));
      doReturn((MenuItem) null, (MenuItem) null).when(menu0).findItem(anyInt());
      doReturn(1).when(menu0).size();
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(1, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      int int0 = menuWrapper0.size();
      assertEquals(1, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(1, int0);
      
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent[] intentArray0 = new Intent[5];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      intentArray0[0] = intent0;
      intentArray0[1] = intent0;
      intentArray0[2] = intent0;
      intentArray0[3] = intent0;
      intentArray0[4] = intent0;
      com.actionbarsherlock.view.SubMenu subMenu1 = menuWrapper0.addSubMenu((CharSequence) "android.intent.action.FACTORY_TEST");
      assertEquals(1, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(subMenu1.hasVisibleItems());
      assertEquals(1, subMenu1.size());
      assertNotNull(subMenu1);
      
      com.actionbarsherlock.view.MenuItem menuItem2 = menuWrapper0.add(1, (-1695), 134217728, (CharSequence) "android.intent.action.MEDIA_EJECT");
      assertEquals(1, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(menuItem2.expandActionView());
      assertEquals('a', menuItem2.getNumericShortcut());
      assertFalse(menuItem2.hasSubMenu());
      assertFalse(menuItem2.isCheckable());
      assertFalse(menuItem2.isEnabled());
      assertFalse(menuItem2.isVisible());
      assertFalse(menuItem2.isActionViewExpanded());
      assertFalse(menuItem2.collapseActionView());
      assertEquals(0, menuItem2.getItemId());
      assertEquals('a', menuItem2.getAlphabeticShortcut());
      assertFalse(menuItem2.isChecked());
      assertEquals(0, menuItem2.getOrder());
      assertEquals(0, menuItem2.getGroupId());
      assertNotNull(menuItem2);
      
      com.actionbarsherlock.view.MenuItem menuItem3 = menuWrapper0.findItem((-2309));
      assertEquals(1, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNull(menuItem3);
      
      com.actionbarsherlock.view.MenuItem menuItem4 = menuWrapper0.findItem(0);
      assertEquals(1, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNull(menuItem4);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      MenuWrapper menuWrapper0 = new MenuWrapper((Menu) null);
      assertNotNull(menuWrapper0);
      
      // Undeclared exception!
      try { 
        menuWrapper0.removeGroup((-577));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0).when(menu0).add(anyInt());
      doReturn((SubMenu) null).when(menu0).addSubMenu(any(java.lang.CharSequence.class));
      doReturn((-617)).when(menu0).size();
      doReturn("android.intent.action.TIMEZONE_CHANGED").when(menu0).toString();
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals((-617), menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      int int0 = 171;
      menuWrapper0.setGroupVisible(171, false);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals((-617), menuWrapper0.size());
      
      int int1 = menuWrapper0.size();
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals((-617), menuWrapper0.size());
      assertFalse(int1 == int0);
      assertEquals((-617), int1);
      
      Menu menu1 = menuWrapper0.unwrap();
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals((-617), menuWrapper0.size());
      assertEquals((-617), menu1.size());
      assertFalse(menu1.hasVisibleItems());
      assertNotNull(menu1);
      assertSame(menu1, menu0);
      
      com.actionbarsherlock.view.MenuItem menuItem1 = menuWrapper0.add((-69));
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals((-617), menuWrapper0.size());
      assertTrue(menuItem1.expandActionView());
      assertFalse(menuItem1.isCheckable());
      assertTrue(menuItem1.hasSubMenu());
      assertEquals('V', menuItem1.getAlphabeticShortcut());
      assertFalse(menuItem1.isChecked());
      assertTrue(menuItem1.isActionViewExpanded());
      assertEquals((-617), menuItem1.getItemId());
      assertEquals(161, menuItem1.getOrder());
      assertEquals('-', menuItem1.getNumericShortcut());
      assertFalse(menuItem1.isEnabled());
      assertEquals(1934, menuItem1.getGroupId());
      assertTrue(menuItem1.collapseActionView());
      assertFalse(menuItem1.isVisible());
      assertNotNull(menuItem1);
      
      int int2 = (-1466);
      int int3 = 1;
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu((CharSequence) "android.intent.action.TIMEZONE_CHANGED");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0).when(menu0).add(anyInt());
      doReturn((SubMenu) null).when(menu0).addSubMenu(any(java.lang.CharSequence.class));
      doReturn((-617)).when(menu0).size();
      doReturn("android.intent.action.TIMEZONE_CHANGED").when(menu0).toString();
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals((-617), menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      int int0 = 171;
      menuWrapper0.setGroupVisible(171, false);
      assertEquals((-617), menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      
      int int1 = menuWrapper0.size();
      assertEquals((-617), menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(int1 == int0);
      assertEquals((-617), int1);
      
      Menu menu1 = menuWrapper0.unwrap();
      assertEquals((-617), menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals((-617), menu1.size());
      assertFalse(menu1.hasVisibleItems());
      assertNotNull(menu1);
      assertSame(menu1, menu0);
      
      com.actionbarsherlock.view.MenuItem menuItem1 = menuWrapper0.add((-69));
      assertEquals((-617), menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(menuItem1.hasSubMenu());
      assertEquals(1699, menuItem1.getItemId());
      assertFalse(menuItem1.expandActionView());
      assertTrue(menuItem1.isChecked());
      assertTrue(menuItem1.isActionViewExpanded());
      assertFalse(menuItem1.isCheckable());
      assertFalse(menuItem1.isEnabled());
      assertEquals('&', menuItem1.getNumericShortcut());
      assertEquals('`', menuItem1.getAlphabeticShortcut());
      assertEquals((-311), menuItem1.getGroupId());
      assertTrue(menuItem1.collapseActionView());
      assertEquals((-311), menuItem1.getOrder());
      assertFalse(menuItem1.isVisible());
      assertNotNull(menuItem1);
      
      int int2 = (-1466);
      int int3 = 1;
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu((CharSequence) "android.intent.action.TIMEZONE_CHANGED");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      SubMenu subMenu0 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0, menuItem0).when(subMenu0).getItem();
      MenuItem menuItem1 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem1).when(menu0).add(anyInt());
      doReturn(0).when(menu0).addIntentOptions(anyInt() , anyInt() , anyInt() , any(android.content.ComponentName.class) , any(android.content.Intent[].class) , any(android.content.Intent.class) , anyInt() , any(android.view.MenuItem[].class));
      doReturn(subMenu0).when(menu0).addSubMenu(anyInt());
      doReturn(menuItem1).when(menu0).getItem(anyInt());
      doReturn(1633).when(menu0).size();
      doReturn("B;JS;KV]BeC").when(menu0).toString();
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(1633, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      menuWrapper0.removeItem(795);
      assertEquals(1633, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      
      menuWrapper0.setGroupVisible(171, false);
      assertEquals(1633, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      
      int int0 = menuWrapper0.size();
      assertEquals(1633, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(1633, int0);
      
      Menu menu1 = menuWrapper0.unwrap();
      assertEquals(1633, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(menu1.hasVisibleItems());
      assertEquals(1633, menu1.size());
      assertNotNull(menu1);
      assertSame(menu1, menu0);
      
      com.actionbarsherlock.view.SubMenu subMenu1 = menuWrapper0.addSubMenu(0);
      assertEquals(1633, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals((-2420), subMenu1.size());
      assertTrue(subMenu1.hasVisibleItems());
      assertNotNull(subMenu1);
      
      com.actionbarsherlock.view.MenuItem menuItem2 = menuWrapper0.getItem((-618));
      assertEquals(1633, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(menuItem2.isChecked());
      assertEquals('a', menuItem2.getAlphabeticShortcut());
      assertEquals('a', menuItem2.getNumericShortcut());
      assertFalse(menuItem2.isActionViewExpanded());
      assertFalse(menuItem2.expandActionView());
      assertEquals(0, menuItem2.getOrder());
      assertFalse(menuItem2.hasSubMenu());
      assertFalse(menuItem2.isCheckable());
      assertEquals(0, menuItem2.getItemId());
      assertFalse(menuItem2.isEnabled());
      assertEquals(0, menuItem2.getGroupId());
      assertFalse(menuItem2.isVisible());
      assertFalse(menuItem2.collapseActionView());
      assertNotNull(menuItem2);
      
      com.actionbarsherlock.view.MenuItem menuItem3 = menuWrapper0.add((-69));
      assertEquals(1633, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(menuItem3.isVisible());
      assertFalse(menuItem3.isChecked());
      assertFalse(menuItem3.collapseActionView());
      assertFalse(menuItem3.isActionViewExpanded());
      assertEquals('a', menuItem3.getAlphabeticShortcut());
      assertFalse(menuItem3.hasSubMenu());
      assertEquals(0, menuItem3.getItemId());
      assertFalse(menuItem3.expandActionView());
      assertEquals(0, menuItem3.getGroupId());
      assertEquals(0, menuItem3.getOrder());
      assertFalse(menuItem3.isCheckable());
      assertEquals('a', menuItem3.getNumericShortcut());
      assertFalse(menuItem3.isEnabled());
      assertNotNull(menuItem3);
      assertFalse(menuItem3.equals((Object)menuItem2));
      assertNotSame(menuItem3, menuItem2);
      
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent[] intentArray0 = new Intent[0];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      com.actionbarsherlock.view.MenuItem[] menuItemArray0 = new com.actionbarsherlock.view.MenuItem[1];
      menuItemArray0[0] = menuItem2;
      // Undeclared exception!
      try { 
        menuWrapper0.addIntentOptions(3406, (-1466), 1, componentName0, intentArray0, intent0, 65536, menuItemArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0).when(menu0).add(any(java.lang.CharSequence.class));
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      com.actionbarsherlock.view.MenuItem menuItem1 = menuWrapper0.add(charSequence0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals('5', menuItem1.getAlphabeticShortcut());
      assertTrue(menuItem1.hasSubMenu());
      assertEquals(1871, menuItem1.getOrder());
      assertEquals(1460, menuItem1.getGroupId());
      assertTrue(menuItem1.isActionViewExpanded());
      assertTrue(menuItem1.isCheckable());
      assertTrue(menuItem1.expandActionView());
      assertTrue(menuItem1.isEnabled());
      assertFalse(menuItem1.isVisible());
      assertFalse(menuItem1.isChecked());
      assertEquals('C', menuItem1.getNumericShortcut());
      assertFalse(menuItem1.collapseActionView());
      assertEquals((-274), menuItem1.getItemId());
      assertNotNull(menuItem1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      MenuItem menuItem1 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      MenuItem menuItem2 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0).when(menu0).add(any(java.lang.CharSequence.class));
      doReturn(menuItem1).when(menu0).add(anyInt());
      doReturn((MenuItem) null).when(menu0).add(anyInt() , anyInt() , anyInt() , any(java.lang.CharSequence.class));
      doReturn(menuItem2).when(menu0).findItem(anyInt());
      doReturn(menuItem2).when(menu0).getItem(anyInt());
      doReturn(false).when(menu0).performIdentifierAction(anyInt() , anyInt());
      doReturn(185).when(menu0).size();
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(185, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      menuWrapper0.clear();
      assertEquals(185, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      com.actionbarsherlock.view.MenuItem menuItem3 = menuWrapper0.add(charSequence0);
      assertEquals(185, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(menuItem3.isActionViewExpanded());
      assertFalse(menuItem3.isVisible());
      assertEquals('T', menuItem3.getNumericShortcut());
      assertEquals(876, menuItem3.getGroupId());
      assertFalse(menuItem3.isEnabled());
      assertEquals(876, menuItem3.getItemId());
      assertEquals('S', menuItem3.getAlphabeticShortcut());
      assertTrue(menuItem3.hasSubMenu());
      assertTrue(menuItem3.collapseActionView());
      assertEquals((-9), menuItem3.getOrder());
      assertTrue(menuItem3.expandActionView());
      assertFalse(menuItem3.isCheckable());
      assertTrue(menuItem3.isChecked());
      assertNotNull(menuItem3);
      
      com.actionbarsherlock.view.MenuItem menuItem4 = menuWrapper0.add((-3980));
      assertEquals(185, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertTrue(menuItem4.isEnabled());
      assertEquals(0, menuItem4.getGroupId());
      assertTrue(menuItem4.isCheckable());
      assertTrue(menuItem4.isVisible());
      assertTrue(menuItem4.isChecked());
      assertTrue(menuItem4.isActionViewExpanded());
      assertFalse(menuItem4.hasSubMenu());
      assertEquals(134217728, menuItem4.getItemId());
      assertFalse(menuItem4.expandActionView());
      assertEquals('T', menuItem4.getAlphabeticShortcut());
      assertEquals(876, menuItem4.getOrder());
      assertFalse(menuItem4.collapseActionView());
      assertEquals('l', menuItem4.getNumericShortcut());
      assertNotNull(menuItem4);
      assertFalse(menuItem4.equals((Object)menuItem3));
      assertNotSame(menuItem4, menuItem3);
      
      int int0 = 0;
      boolean boolean0 = menuWrapper0.performIdentifierAction(0, (-208));
      assertEquals(185, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(boolean0);
      
      com.actionbarsherlock.view.MenuItem menuItem5 = menuWrapper0.findItem(332);
      assertEquals(185, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(menuItem5.hasSubMenu());
      assertEquals('a', menuItem5.getAlphabeticShortcut());
      assertEquals('a', menuItem5.getNumericShortcut());
      assertFalse(menuItem5.collapseActionView());
      assertFalse(menuItem5.isVisible());
      assertFalse(menuItem5.isEnabled());
      assertEquals(0, menuItem5.getGroupId());
      assertFalse(menuItem5.isActionViewExpanded());
      assertFalse(menuItem5.isChecked());
      assertEquals(0, menuItem5.getOrder());
      assertFalse(menuItem5.isCheckable());
      assertEquals(0, menuItem5.getItemId());
      assertFalse(menuItem5.expandActionView());
      assertNotNull(menuItem5);
      assertFalse(menuItem5.equals((Object)menuItem4));
      assertFalse(menuItem5.equals((Object)menuItem3));
      assertNotSame(menuItem5, menuItem4);
      assertNotSame(menuItem5, menuItem3);
      
      com.actionbarsherlock.view.MenuItem menuItem6 = menuWrapper0.getItem((-208));
      assertEquals(185, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(menuItem6.isActionViewExpanded());
      assertFalse(menuItem6.isVisible());
      assertEquals(0, menuItem6.getGroupId());
      assertEquals(0, menuItem6.getOrder());
      assertFalse(menuItem6.collapseActionView());
      assertFalse(menuItem6.isEnabled());
      assertFalse(menuItem6.isChecked());
      assertEquals('a', menuItem6.getAlphabeticShortcut());
      assertEquals('a', menuItem6.getNumericShortcut());
      assertFalse(menuItem6.expandActionView());
      assertFalse(menuItem6.isCheckable());
      assertFalse(menuItem6.hasSubMenu());
      assertEquals(0, menuItem6.getItemId());
      assertNotNull(menuItem6);
      assertFalse(menuItem6.equals((Object)menuItem4));
      assertFalse(menuItem6.equals((Object)menuItem3));
      assertSame(menuItem6, menuItem5);
      assertNotSame(menuItem6, menuItem4);
      assertNotSame(menuItem6, menuItem3);
      
      int int1 = menuWrapper0.size();
      assertEquals(185, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(int1 == int0);
      assertEquals(185, int1);
      
      int int2 = (-3637);
      int int3 = 16777215;
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent[] intentArray0 = new Intent[8];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      intentArray0[0] = intent0;
      intentArray0[1] = intent0;
      intentArray0[2] = intent0;
      intentArray0[3] = intent0;
      intentArray0[4] = intent0;
      intentArray0[5] = intent0;
      intentArray0[6] = intent0;
      intentArray0[7] = intent0;
      int int4 = 1;
      com.actionbarsherlock.view.MenuItem[] menuItemArray0 = new com.actionbarsherlock.view.MenuItem[4];
      menuItemArray0[0] = menuItem4;
      // Undeclared exception!
      try { 
        menuWrapper0.add((-65), 1, (-2411), (CharSequence) "android.intent.action.MEDIA_BUTTON");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      MenuWrapper menuWrapper0 = new MenuWrapper((Menu) null);
      assertNotNull(menuWrapper0);
      
      KeyEvent keyEvent0 = mock(KeyEvent.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        menuWrapper0.isShortcutKey(2730, keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      SubMenu subMenu0 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0, menuItem0).when(subMenu0).getItem();
      SubMenu subMenu1 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      doReturn((MenuItem) null, (MenuItem) null).when(subMenu1).getItem();
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(subMenu0).when(menu0).addSubMenu(anyInt());
      doReturn(subMenu1).when(menu0).addSubMenu(anyInt() , anyInt() , anyInt() , anyInt());
      doReturn(true).when(menu0).performIdentifierAction(anyInt() , anyInt());
      doReturn(false).when(menu0).performShortcut(anyInt() , any(android.view.KeyEvent.class) , anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      menuWrapper0.removeItem(2);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      
      boolean boolean0 = menuWrapper0.performIdentifierAction((-4300), (-4300));
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertTrue(boolean0);
      
      KeyEvent keyEvent0 = mock(KeyEvent.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = menuWrapper0.performShortcut((-4300), keyEvent0, 118);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = 1002;
      int int1 = 1;
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      com.actionbarsherlock.view.SubMenu subMenu2 = menuWrapper0.addSubMenu((-696));
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(subMenu2.hasVisibleItems());
      assertEquals(1644, subMenu2.size());
      assertNotNull(subMenu2);
      
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu((-1205), 193, (-907), 79);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      MenuItem menuItem1 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      SubMenu subMenu0 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem1, menuItem0).when(subMenu0).getItem();
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((MenuItem) null).when(menu0).add(anyInt() , anyInt() , anyInt() , any(java.lang.CharSequence.class));
      doReturn(subMenu0).when(menu0).addSubMenu(any(java.lang.CharSequence.class));
      doReturn(1).when(menu0).size();
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(1, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      int int0 = menuWrapper0.size();
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(1, menuWrapper0.size());
      assertEquals(1, int0);
      
      int int1 = 27;
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent[] intentArray0 = new Intent[5];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      intentArray0[0] = intent0;
      intentArray0[1] = intent0;
      intentArray0[2] = intent0;
      intentArray0[3] = intent0;
      intentArray0[4] = intent0;
      com.actionbarsherlock.view.MenuItem[] menuItemArray0 = new com.actionbarsherlock.view.MenuItem[3];
      com.actionbarsherlock.view.SubMenu subMenu1 = menuWrapper0.addSubMenu((CharSequence) "android.intent.action.FACTORY_TEST");
      assertFalse(subMenu1.hasVisibleItems());
      assertEquals(0, subMenu1.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(1, menuWrapper0.size());
      assertNotNull(subMenu1);
      
      // Undeclared exception!
      try { 
        menuWrapper0.add(1, (-1695), 134217728, (CharSequence) "android.intent.action.MEDIA_EJECT");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      SubMenu subMenu0 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0, menuItem0).when(subMenu0).getItem();
      SubMenu subMenu1 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      doReturn((MenuItem) null, (MenuItem) null).when(subMenu1).getItem();
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(subMenu0).when(menu0).addSubMenu(anyInt());
      doReturn(subMenu1).when(menu0).addSubMenu(anyInt() , anyInt() , anyInt() , anyInt());
      doReturn(true).when(menu0).performIdentifierAction(anyInt() , anyInt());
      doReturn(false).when(menu0).performShortcut(anyInt() , any(android.view.KeyEvent.class) , anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      menuWrapper0.removeItem(2);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      
      boolean boolean0 = menuWrapper0.performIdentifierAction((-4300), (-4300));
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertTrue(boolean0);
      
      KeyEvent keyEvent0 = mock(KeyEvent.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = menuWrapper0.performShortcut((-4300), keyEvent0, 118);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = 1002;
      int int1 = 1;
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      com.actionbarsherlock.view.SubMenu subMenu2 = menuWrapper0.addSubMenu((-696));
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertTrue(subMenu2.hasVisibleItems());
      assertEquals(0, subMenu2.size());
      assertNotNull(subMenu2);
      
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu((-1205), 193, (-907), 79);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      SubMenu subMenu0 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0, menuItem0).when(subMenu0).getItem();
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(subMenu0).when(menu0).addSubMenu(anyInt());
      doReturn((SubMenu) null).when(menu0).addSubMenu(anyInt() , anyInt() , anyInt() , anyInt());
      doReturn(true).when(menu0).performIdentifierAction(anyInt() , anyInt());
      doReturn(false).when(menu0).performShortcut(anyInt() , any(android.view.KeyEvent.class) , anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      menuWrapper0.removeItem(2);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      
      boolean boolean0 = menuWrapper0.performIdentifierAction((-4300), (-4300));
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertTrue(boolean0);
      
      KeyEvent keyEvent0 = mock(KeyEvent.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = menuWrapper0.performShortcut((-4300), keyEvent0, 118);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = 1002;
      int int1 = 1;
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      com.actionbarsherlock.view.SubMenu subMenu1 = menuWrapper0.addSubMenu((-696));
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, subMenu1.size());
      assertFalse(subMenu1.hasVisibleItems());
      assertNotNull(subMenu1);
      
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu((-1205), 193, (-907), 79);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      MenuItem menuItem1 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0).when(menu0).add(any(java.lang.CharSequence.class));
      doReturn(menuItem1).when(menu0).add(anyInt() , anyInt() , anyInt() , any(java.lang.CharSequence.class));
      doReturn((SubMenu) null).when(menu0).addSubMenu(anyInt() , anyInt() , anyInt() , anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      int int0 = 1904;
      com.actionbarsherlock.view.MenuItem menuItem2 = menuWrapper0.add((CharSequence) null);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(1438, menuItem2.getItemId());
      assertTrue(menuItem2.expandActionView());
      assertEquals('\'', menuItem2.getAlphabeticShortcut());
      assertTrue(menuItem2.isCheckable());
      assertEquals('-', menuItem2.getNumericShortcut());
      assertFalse(menuItem2.isEnabled());
      assertTrue(menuItem2.isActionViewExpanded());
      assertEquals(1438, menuItem2.getOrder());
      assertEquals(1438, menuItem2.getGroupId());
      assertFalse(menuItem2.hasSubMenu());
      assertTrue(menuItem2.collapseActionView());
      assertTrue(menuItem2.isChecked());
      assertTrue(menuItem2.isVisible());
      assertNotNull(menuItem2);
      
      KeyEvent keyEvent0 = mock(KeyEvent.class, new ViolatedAssumptionAnswer());
      com.actionbarsherlock.view.MenuItem menuItem3 = menuWrapper0.add(168, 0, 146, (CharSequence) null);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuItem3.getItemId());
      assertFalse(menuItem3.isEnabled());
      assertEquals(0, menuItem3.getGroupId());
      assertEquals(0, menuItem3.getOrder());
      assertFalse(menuItem3.expandActionView());
      assertFalse(menuItem3.isCheckable());
      assertFalse(menuItem3.hasSubMenu());
      assertEquals('a', menuItem3.getAlphabeticShortcut());
      assertEquals('a', menuItem3.getNumericShortcut());
      assertFalse(menuItem3.isChecked());
      assertFalse(menuItem3.isVisible());
      assertFalse(menuItem3.isActionViewExpanded());
      assertFalse(menuItem3.collapseActionView());
      assertNotNull(menuItem3);
      assertFalse(menuItem3.equals((Object)menuItem2));
      assertNotSame(menuItem3, menuItem2);
      
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu(1024, 4194304, 173, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      SubMenu subMenu0 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0, menuItem0).when(subMenu0).getItem();
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(subMenu0).when(menu0).addSubMenu(anyInt() , anyInt() , anyInt() , any(java.lang.CharSequence.class));
      doReturn((SubMenu) null).when(menu0).addSubMenu(anyInt() , anyInt() , anyInt() , anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      int int0 = 0;
      menuWrapper0.clear();
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      
      int int1 = 0;
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      com.actionbarsherlock.view.SubMenu subMenu1 = menuWrapper0.addSubMenu(0, 0, 0, charSequence0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, subMenu1.size());
      assertFalse(subMenu1.hasVisibleItems());
      assertNotNull(subMenu1);
      
      int int2 = 872;
      int int3 = (-3309);
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu(201, 312, 201, (-2081));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      MenuItem menuItem1 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0).when(menu0).add(anyInt() , anyInt() , anyInt() , any(java.lang.CharSequence.class));
      doReturn(menuItem0).when(menu0).getItem(anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      menuWrapper0.clear();
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      
      menuWrapper0.removeItem((-450));
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      
      com.actionbarsherlock.view.MenuItem menuItem2 = menuWrapper0.getItem(0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertEquals('.', menuItem2.getNumericShortcut());
      assertFalse(menuItem2.isActionViewExpanded());
      assertFalse(menuItem2.collapseActionView());
      assertFalse(menuItem2.isVisible());
      assertTrue(menuItem2.isEnabled());
      assertEquals('P', menuItem2.getAlphabeticShortcut());
      assertFalse(menuItem2.hasSubMenu());
      assertTrue(menuItem2.expandActionView());
      assertEquals((-450), menuItem2.getOrder());
      assertTrue(menuItem2.isChecked());
      assertFalse(menuItem2.isCheckable());
      assertEquals((-1056), menuItem2.getItemId());
      assertEquals((-1056), menuItem2.getGroupId());
      assertNotNull(menuItem2);
      
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent[] intentArray0 = new Intent[9];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      intentArray0[0] = intent0;
      intentArray0[1] = intent0;
      intentArray0[2] = intent0;
      intentArray0[3] = intent0;
      intentArray0[4] = intent0;
      com.actionbarsherlock.view.MenuItem menuItem3 = menuWrapper0.add(16, 16, 134217728, (CharSequence) "android.intent.action.MANAGE_PACKAGE_STORAGE");
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertEquals((-1056), menuItem3.getGroupId());
      assertEquals('.', menuItem3.getNumericShortcut());
      assertEquals('P', menuItem3.getAlphabeticShortcut());
      assertFalse(menuItem3.isActionViewExpanded());
      assertTrue(menuItem3.isEnabled());
      assertFalse(menuItem3.isVisible());
      assertFalse(menuItem3.collapseActionView());
      assertTrue(menuItem3.isChecked());
      assertTrue(menuItem3.expandActionView());
      assertEquals((-450), menuItem3.getOrder());
      assertFalse(menuItem3.hasSubMenu());
      assertEquals((-1056), menuItem3.getItemId());
      assertFalse(menuItem3.isCheckable());
      assertNotNull(menuItem3);
      assertFalse(menuItem3.equals((Object)menuItem2));
      assertNotSame(menuItem3, menuItem2);
      
      intentArray0[5] = intent0;
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      SubMenu subMenu0 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      MenuItem menuItem1 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0).when(menu0).add(anyInt() , anyInt() , anyInt() , anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      com.actionbarsherlock.view.MenuItem menuItem2 = menuWrapper0.add(1260, 1577, 1260, 1577);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(menuItem2.collapseActionView());
      assertEquals((-1281), menuItem2.getItemId());
      assertFalse(menuItem2.isEnabled());
      assertEquals('S', menuItem2.getNumericShortcut());
      assertEquals((-1328), menuItem2.getGroupId());
      assertTrue(menuItem2.isCheckable());
      assertEquals('S', menuItem2.getAlphabeticShortcut());
      assertTrue(menuItem2.expandActionView());
      assertFalse(menuItem2.hasSubMenu());
      assertTrue(menuItem2.isVisible());
      assertTrue(menuItem2.isChecked());
      assertEquals(519, menuItem2.getOrder());
      assertFalse(menuItem2.isActionViewExpanded());
      assertNotNull(menuItem2);
      
      menuWrapper0.setGroupEnabled(612, false);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      SubMenu subMenu0 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      doReturn((MenuItem) null, (MenuItem) null).when(subMenu0).getItem();
      MenuItem menuItem1 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0).when(menu0).add(anyInt() , anyInt() , anyInt() , anyInt());
      doReturn(subMenu0).when(menu0).addSubMenu(anyInt() , anyInt() , anyInt() , anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      com.actionbarsherlock.view.MenuItem menuItem2 = menuWrapper0.add(1260, 1577, 1260, 1577);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertTrue(menuItem2.hasSubMenu());
      assertFalse(menuItem2.expandActionView());
      assertEquals(608, menuItem2.getItemId());
      assertTrue(menuItem2.isCheckable());
      assertEquals('1', menuItem2.getNumericShortcut());
      assertEquals('1', menuItem2.getAlphabeticShortcut());
      assertEquals((-1312), menuItem2.getOrder());
      assertFalse(menuItem2.isVisible());
      assertTrue(menuItem2.isEnabled());
      assertTrue(menuItem2.isActionViewExpanded());
      assertTrue(menuItem2.isChecked());
      assertEquals(2982, menuItem2.getGroupId());
      assertTrue(menuItem2.collapseActionView());
      assertNotNull(menuItem2);
      
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu(5, 372, 612, 9);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 1;
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      MenuItem menuItem1 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0).when(menu0).add(anyInt() , anyInt() , anyInt() , any(java.lang.CharSequence.class));
      doReturn((MenuItem) null).when(menu0).findItem(anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      int int1 = (-1507);
      int int2 = 196;
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent[] intentArray0 = new Intent[9];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      intentArray0[0] = intent0;
      intentArray0[1] = intent0;
      intentArray0[2] = intent0;
      intentArray0[3] = intent0;
      intentArray0[4] = intent0;
      intentArray0[5] = intent0;
      intentArray0[6] = intent0;
      intentArray0[7] = intent0;
      intentArray0[8] = intent0;
      int int3 = (-1268);
      com.actionbarsherlock.view.MenuItem[] menuItemArray0 = new com.actionbarsherlock.view.MenuItem[7];
      com.actionbarsherlock.view.MenuItem menuItem2 = menuWrapper0.add(8, 1, 536870912, (CharSequence) "android.intent.action.SCREEN_ON");
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertTrue(menuItem2.collapseActionView());
      assertTrue(menuItem2.isActionViewExpanded());
      assertTrue(menuItem2.hasSubMenu());
      assertEquals(8, menuItem2.getOrder());
      assertFalse(menuItem2.isEnabled());
      assertFalse(menuItem2.isCheckable());
      assertEquals(8, menuItem2.getItemId());
      assertFalse(menuItem2.expandActionView());
      assertTrue(menuItem2.isVisible());
      assertFalse(menuItem2.isChecked());
      assertEquals(1, menuItem2.getGroupId());
      assertEquals('?', menuItem2.getAlphabeticShortcut());
      assertEquals('?', menuItem2.getNumericShortcut());
      assertNotNull(menuItem2);
      
      menuItemArray0[0] = menuItem2;
      com.actionbarsherlock.view.MenuItem menuItem3 = menuWrapper0.findItem(2097152);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNull(menuItem3);
      
      menuItemArray0[1] = null;
      Menu menu1 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((MenuItem) null).when(menu1).add(anyInt() , anyInt() , anyInt() , anyInt());
      MenuWrapper menuWrapper1 = new MenuWrapper(menu1);
      assertEquals(0, menuWrapper1.size());
      assertFalse(menuWrapper1.hasVisibleItems());
      assertNotNull(menuWrapper1);
      assertFalse(menuWrapper1.equals((Object)menuWrapper0));
      
      // Undeclared exception!
      try { 
        menuWrapper1.add(8, 16384, 29, 8);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      MenuItem menuItem1 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0).when(menu0).add(anyInt() , anyInt() , anyInt() , any(java.lang.CharSequence.class));
      doReturn(menuItem0).when(menu0).getItem(anyInt());
      doReturn((String) null).when(menu0).toString();
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      menuWrapper0.clear();
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      
      com.actionbarsherlock.view.MenuItem menuItem2 = menuWrapper0.getItem(0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(menuItem2.hasSubMenu());
      assertTrue(menuItem2.isVisible());
      assertEquals((-1198), menuItem2.getGroupId());
      assertEquals(50, menuItem2.getItemId());
      assertFalse(menuItem2.collapseActionView());
      assertFalse(menuItem2.isEnabled());
      assertEquals('S', menuItem2.getNumericShortcut());
      assertFalse(menuItem2.isActionViewExpanded());
      assertEquals(1, menuItem2.getOrder());
      assertFalse(menuItem2.isChecked());
      assertFalse(menuItem2.isCheckable());
      assertTrue(menuItem2.expandActionView());
      assertEquals('S', menuItem2.getAlphabeticShortcut());
      assertNotNull(menuItem2);
      
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent[] intentArray0 = new Intent[9];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      intentArray0[0] = intent0;
      intentArray0[1] = intent0;
      intentArray0[2] = intent0;
      intentArray0[3] = intent0;
      intentArray0[4] = intent0;
      intentArray0[5] = intent0;
      Menu menu1 = menuWrapper0.unwrap();
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menu1.size());
      assertFalse(menu1.hasVisibleItems());
      assertNotNull(menu1);
      assertSame(menu1, menu0);
      
      com.actionbarsherlock.view.MenuItem menuItem3 = menuWrapper0.add(3, 96, 4, (CharSequence) "android.intent.action.DOCK_EVENT");
      assertEquals('S', menuItem3.getAlphabeticShortcut());
      assertEquals((-1198), menuItem3.getGroupId());
      assertFalse(menuItem3.isCheckable());
      assertTrue(menuItem3.isVisible());
      assertTrue(menuItem3.expandActionView());
      assertEquals(1, menuItem3.getOrder());
      assertFalse(menuItem3.hasSubMenu());
      assertEquals('S', menuItem3.getNumericShortcut());
      assertFalse(menuItem3.isActionViewExpanded());
      assertFalse(menuItem3.isChecked());
      assertFalse(menuItem3.collapseActionView());
      assertEquals(50, menuItem3.getItemId());
      assertFalse(menuItem3.isEnabled());
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuItem3);
      assertFalse(menuItem3.equals((Object)menuItem2));
      assertNotSame(menuItem3, menuItem2);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 7;
      MenuWrapper menuWrapper0 = new MenuWrapper((Menu) null);
      assertNotNull(menuWrapper0);
      
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        menuWrapper0.add(charSequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MenuWrapper menuWrapper0 = new MenuWrapper((Menu) null);
      assertNotNull(menuWrapper0);
      
      Menu menu0 = menuWrapper0.unwrap();
      assertNull(menu0);
      
      int int0 = (-1143);
      int int1 = 61185;
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu(61185);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      MenuItem menuItem1 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0).when(menu0).add(any(java.lang.CharSequence.class));
      doReturn(menuItem1).when(menu0).add(anyInt());
      doReturn((MenuItem) null).when(menu0).findItem(anyInt());
      doReturn((MenuItem) null).when(menu0).getItem(anyInt());
      doReturn(false).when(menu0).performIdentifierAction(anyInt() , anyInt());
      doReturn(0).when(menu0).size();
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      menuWrapper0.clear();
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      com.actionbarsherlock.view.MenuItem menuItem2 = menuWrapper0.add(charSequence0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(menuItem2.isChecked());
      assertEquals(0, menuItem2.getOrder());
      assertFalse(menuItem2.isVisible());
      assertTrue(menuItem2.isCheckable());
      assertFalse(menuItem2.isEnabled());
      assertEquals('z', menuItem2.getNumericShortcut());
      assertEquals((-52), menuItem2.getGroupId());
      assertEquals(0, menuItem2.getItemId());
      assertFalse(menuItem2.hasSubMenu());
      assertTrue(menuItem2.collapseActionView());
      assertFalse(menuItem2.expandActionView());
      assertEquals('z', menuItem2.getAlphabeticShortcut());
      assertFalse(menuItem2.isActionViewExpanded());
      assertNotNull(menuItem2);
      
      com.actionbarsherlock.view.MenuItem menuItem3 = menuWrapper0.add((-3980));
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals('a', menuItem3.getAlphabeticShortcut());
      assertFalse(menuItem3.collapseActionView());
      assertFalse(menuItem3.isChecked());
      assertEquals(0, menuItem3.getOrder());
      assertFalse(menuItem3.isVisible());
      assertFalse(menuItem3.isEnabled());
      assertFalse(menuItem3.isCheckable());
      assertEquals(0, menuItem3.getItemId());
      assertEquals(0, menuItem3.getGroupId());
      assertEquals('a', menuItem3.getNumericShortcut());
      assertFalse(menuItem3.hasSubMenu());
      assertFalse(menuItem3.expandActionView());
      assertFalse(menuItem3.isActionViewExpanded());
      assertNotNull(menuItem3);
      assertFalse(menuItem3.equals((Object)menuItem2));
      assertNotSame(menuItem3, menuItem2);
      
      boolean boolean0 = menuWrapper0.performIdentifierAction(0, (-208));
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(boolean0);
      
      com.actionbarsherlock.view.MenuItem menuItem4 = menuWrapper0.findItem(332);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNull(menuItem4);
      
      com.actionbarsherlock.view.MenuItem menuItem5 = menuWrapper0.getItem((-208));
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNull(menuItem5);
      
      int int0 = menuWrapper0.size();
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((MenuItem) null).when(menu0).getItem(anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      com.actionbarsherlock.view.MenuItem menuItem0 = menuWrapper0.getItem((-1161));
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNull(menuItem0);
      
      MenuItem menuItem1 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      com.actionbarsherlock.view.MenuItem menuItem2 = menuWrapper0.findItem(menuItem1);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertTrue(menuItem2.isActionViewExpanded());
      assertFalse(menuItem2.collapseActionView());
      assertEquals('D', menuItem2.getAlphabeticShortcut());
      assertFalse(menuItem2.isVisible());
      assertEquals('D', menuItem2.getNumericShortcut());
      assertTrue(menuItem2.isEnabled());
      assertEquals((-1161), menuItem2.getItemId());
      assertEquals((-1939), menuItem2.getGroupId());
      assertFalse(menuItem2.isCheckable());
      assertTrue(menuItem2.hasSubMenu());
      assertEquals((-642), menuItem2.getOrder());
      assertTrue(menuItem2.isChecked());
      assertFalse(menuItem2.expandActionView());
      assertNotNull(menuItem2);
      
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent[] intentArray0 = new Intent[9];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      intentArray0[0] = intent0;
      intentArray0[1] = intent0;
      intentArray0[2] = intent0;
      intentArray0[3] = intent0;
      intentArray0[4] = intent0;
      intentArray0[5] = intent0;
      intentArray0[6] = intent0;
      intentArray0[7] = intent0;
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      MenuItem menuItem1 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0).when(menu0).findItem(anyInt());
      doReturn(menuItem1, menuItem1).when(menu0).getItem(anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      menuWrapper0.removeItem((-92));
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      
      com.actionbarsherlock.view.MenuItem menuItem2 = menuWrapper0.getItem(93);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuItem2.isChecked());
      assertEquals(3729, menuItem2.getItemId());
      assertEquals((-356), menuItem2.getGroupId());
      assertTrue(menuItem2.isEnabled());
      assertTrue(menuItem2.isCheckable());
      assertEquals('p', menuItem2.getAlphabeticShortcut());
      assertEquals('Y', menuItem2.getNumericShortcut());
      assertTrue(menuItem2.expandActionView());
      assertFalse(menuItem2.hasSubMenu());
      assertTrue(menuItem2.collapseActionView());
      assertTrue(menuItem2.isVisible());
      assertEquals((-92), menuItem2.getOrder());
      assertFalse(menuItem2.isActionViewExpanded());
      assertNotNull(menuItem2);
      
      com.actionbarsherlock.view.MenuItem menuItem3 = menuWrapper0.getItem(302);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertEquals((-356), menuItem3.getGroupId());
      assertTrue(menuItem3.isEnabled());
      assertTrue(menuItem3.isVisible());
      assertEquals((-92), menuItem3.getOrder());
      assertFalse(menuItem3.isChecked());
      assertFalse(menuItem3.isActionViewExpanded());
      assertTrue(menuItem3.isCheckable());
      assertEquals('Y', menuItem3.getNumericShortcut());
      assertFalse(menuItem3.hasSubMenu());
      assertTrue(menuItem3.expandActionView());
      assertEquals('p', menuItem3.getAlphabeticShortcut());
      assertTrue(menuItem3.collapseActionView());
      assertEquals(3729, menuItem3.getItemId());
      assertNotNull(menuItem3);
      assertSame(menuItem3, menuItem2);
      
      menuWrapper0.clear();
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      
      com.actionbarsherlock.view.MenuItem menuItem4 = menuWrapper0.findItem(302);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertEquals(4, menuItem4.getItemId());
      assertFalse(menuItem4.isCheckable());
      assertEquals(4, menuItem4.getGroupId());
      assertEquals((-1715), menuItem4.getOrder());
      assertFalse(menuItem4.collapseActionView());
      assertFalse(menuItem4.isVisible());
      assertTrue(menuItem4.isEnabled());
      assertFalse(menuItem4.hasSubMenu());
      assertFalse(menuItem4.expandActionView());
      assertTrue(menuItem4.isChecked());
      assertEquals('Y', menuItem4.getAlphabeticShortcut());
      assertTrue(menuItem4.isActionViewExpanded());
      assertEquals('Y', menuItem4.getNumericShortcut());
      assertNotNull(menuItem4);
      assertFalse(menuItem4.equals((Object)menuItem2));
      assertFalse(menuItem4.equals((Object)menuItem3));
      assertNotSame(menuItem4, menuItem2);
      assertNotSame(menuItem4, menuItem3);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(menu0).isShortcutKey(anyInt() , any(android.view.KeyEvent.class));
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      KeyEvent keyEvent0 = mock(KeyEvent.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = menuWrapper0.isShortcutKey(0, keyEvent0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertTrue(boolean0);
      
      menuWrapper0.setGroupEnabled(189, true);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      MenuItem menuItem1 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0).when(menu0).add(any(java.lang.CharSequence.class));
      doReturn(menuItem1).when(menu0).add(anyInt());
      doReturn((MenuItem) null).when(menu0).findItem(anyInt());
      doReturn((MenuItem) null).when(menu0).getItem(anyInt());
      doReturn(false).when(menu0).performIdentifierAction(anyInt() , anyInt());
      doReturn(0).when(menu0).size();
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      menuWrapper0.clear();
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      com.actionbarsherlock.view.MenuItem menuItem2 = menuWrapper0.add(charSequence0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(menuItem2.isCheckable());
      assertFalse(menuItem2.isEnabled());
      assertEquals(876, menuItem2.getGroupId());
      assertTrue(menuItem2.collapseActionView());
      assertFalse(menuItem2.isVisible());
      assertEquals(876, menuItem2.getItemId());
      assertTrue(menuItem2.isChecked());
      assertFalse(menuItem2.isActionViewExpanded());
      assertEquals((-9), menuItem2.getOrder());
      assertTrue(menuItem2.hasSubMenu());
      assertEquals('T', menuItem2.getNumericShortcut());
      assertEquals('S', menuItem2.getAlphabeticShortcut());
      assertTrue(menuItem2.expandActionView());
      assertNotNull(menuItem2);
      
      com.actionbarsherlock.view.MenuItem menuItem3 = menuWrapper0.add((-3980));
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(menuItem3.isActionViewExpanded());
      assertFalse(menuItem3.collapseActionView());
      assertFalse(menuItem3.isVisible());
      assertFalse(menuItem3.isEnabled());
      assertFalse(menuItem3.expandActionView());
      assertEquals('a', menuItem3.getNumericShortcut());
      assertFalse(menuItem3.hasSubMenu());
      assertFalse(menuItem3.isCheckable());
      assertEquals('a', menuItem3.getAlphabeticShortcut());
      assertEquals(0, menuItem3.getItemId());
      assertEquals(0, menuItem3.getOrder());
      assertFalse(menuItem3.isChecked());
      assertEquals(0, menuItem3.getGroupId());
      assertNotNull(menuItem3);
      assertFalse(menuItem3.equals((Object)menuItem2));
      assertNotSame(menuItem3, menuItem2);
      
      boolean boolean0 = menuWrapper0.performIdentifierAction(0, (-208));
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(boolean0);
      
      com.actionbarsherlock.view.MenuItem menuItem4 = menuWrapper0.findItem(332);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNull(menuItem4);
      
      com.actionbarsherlock.view.MenuItem menuItem5 = menuWrapper0.getItem((-208));
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNull(menuItem5);
      
      int int0 = menuWrapper0.size();
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      MenuItem menuItem1 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      SubMenu subMenu0 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0, menuItem0).when(subMenu0).getItem();
      MenuItem menuItem2 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(subMenu0, (SubMenu) null).when(menu0).addSubMenu(anyInt() , anyInt() , anyInt() , anyInt());
      doReturn(menuItem2).when(menu0).findItem(anyInt());
      doReturn(true).when(menu0).performShortcut(anyInt() , any(android.view.KeyEvent.class) , anyInt());
      doReturn((-1160)).when(menu0).size();
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals((-1160), menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      menuWrapper0.removeItem(1);
      assertEquals((-1160), menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      
      menuWrapper0.removeItem(0);
      assertEquals((-1160), menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      
      com.actionbarsherlock.view.MenuItem menuItem3 = menuWrapper0.findItem(117);
      assertEquals((-1160), menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(menuItem3.isChecked());
      assertTrue(menuItem3.isActionViewExpanded());
      assertTrue(menuItem3.isEnabled());
      assertEquals((-1160), menuItem3.getGroupId());
      assertTrue(menuItem3.collapseActionView());
      assertFalse(menuItem3.expandActionView());
      assertEquals('>', menuItem3.getAlphabeticShortcut());
      assertTrue(menuItem3.isVisible());
      assertEquals('>', menuItem3.getNumericShortcut());
      assertTrue(menuItem3.hasSubMenu());
      assertFalse(menuItem3.isCheckable());
      assertEquals((-1160), menuItem3.getOrder());
      assertEquals((-1160), menuItem3.getItemId());
      assertNotNull(menuItem3);
      
      com.actionbarsherlock.view.SubMenu subMenu1 = menuWrapper0.addSubMenu(0, 0, 1, (-4714));
      assertEquals((-1160), menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertTrue(subMenu1.hasVisibleItems());
      assertEquals((-1160), subMenu1.size());
      assertNotNull(subMenu1);
      
      KeyEvent keyEvent0 = mock(KeyEvent.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = menuWrapper0.performShortcut(0, keyEvent0, 51);
      assertEquals((-1160), menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertTrue(boolean0);
      
      int int0 = menuWrapper0.size();
      assertEquals((-1160), menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals((-1160), int0);
      
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu(129, 0, 4174, (-980));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((SubMenu) null).when(menu0).addSubMenu(anyInt());
      doReturn((-1)).when(menu0).size();
      doReturn("com.actionbarsherlock.internal.view.menu.MenuWrapper").when(menu0).toString();
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals((-1), menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      menuWrapper0.setGroupVisible(171, false);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals((-1), menuWrapper0.size());
      
      int int0 = menuWrapper0.size();
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals((-1), menuWrapper0.size());
      assertEquals((-1), int0);
      
      Menu menu1 = menuWrapper0.unwrap();
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals((-1), menuWrapper0.size());
      assertFalse(menu1.hasVisibleItems());
      assertEquals((-1), menu1.size());
      assertNotNull(menu1);
      assertSame(menu1, menu0);
      
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      MenuItem menuItem1 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      SubMenu subMenu0 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0, menuItem0).when(subMenu0).getItem();
      MenuItem menuItem2 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(subMenu0, (SubMenu) null).when(menu0).addSubMenu(anyInt() , anyInt() , anyInt() , anyInt());
      doReturn(menuItem2).when(menu0).findItem(anyInt());
      doReturn(false).when(menu0).performShortcut(anyInt() , any(android.view.KeyEvent.class) , anyInt());
      doReturn(1493).when(menu0).size();
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(1493, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      menuWrapper0.removeItem(1);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(1493, menuWrapper0.size());
      
      menuWrapper0.removeItem(0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(1493, menuWrapper0.size());
      
      com.actionbarsherlock.view.MenuItem menuItem3 = menuWrapper0.findItem(117);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(1493, menuWrapper0.size());
      assertTrue(menuItem3.hasSubMenu());
      assertTrue(menuItem3.expandActionView());
      assertEquals('=', menuItem3.getAlphabeticShortcut());
      assertTrue(menuItem3.collapseActionView());
      assertEquals(512, menuItem3.getGroupId());
      assertFalse(menuItem3.isChecked());
      assertFalse(menuItem3.isVisible());
      assertTrue(menuItem3.isEnabled());
      assertTrue(menuItem3.isActionViewExpanded());
      assertTrue(menuItem3.isCheckable());
      assertEquals(1493, menuItem3.getOrder());
      assertEquals(1048584, menuItem3.getItemId());
      assertEquals('/', menuItem3.getNumericShortcut());
      assertNotNull(menuItem3);
      
      com.actionbarsherlock.view.SubMenu subMenu1 = menuWrapper0.addSubMenu(0, 0, 1, (-4714));
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(1493, menuWrapper0.size());
      assertTrue(subMenu1.hasVisibleItems());
      assertEquals(512, subMenu1.size());
      assertNotNull(subMenu1);
      
      KeyEvent keyEvent0 = mock(KeyEvent.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = menuWrapper0.performShortcut(0, keyEvent0, 51);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(1493, menuWrapper0.size());
      assertFalse(boolean0);
      
      int int0 = menuWrapper0.size();
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(1493, menuWrapper0.size());
      assertEquals(1493, int0);
      
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu(129, 0, 4174, (-980));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0).when(menu0).getItem(anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      menuWrapper0.clear();
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      
      com.actionbarsherlock.view.MenuItem menuItem1 = menuWrapper0.getItem(0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertTrue(menuItem1.collapseActionView());
      assertTrue(menuItem1.isChecked());
      assertFalse(menuItem1.hasSubMenu());
      assertEquals(4, menuItem1.getGroupId());
      assertEquals(0, menuItem1.getItemId());
      assertTrue(menuItem1.isCheckable());
      assertFalse(menuItem1.isEnabled());
      assertEquals('w', menuItem1.getNumericShortcut());
      assertFalse(menuItem1.isActionViewExpanded());
      assertEquals(0, menuItem1.getOrder());
      assertFalse(menuItem1.expandActionView());
      assertEquals('B', menuItem1.getAlphabeticShortcut());
      assertTrue(menuItem1.isVisible());
      assertNotNull(menuItem1);
      
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent[] intentArray0 = new Intent[9];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      intentArray0[0] = intent0;
      intentArray0[1] = intent0;
      intentArray0[2] = intent0;
      intentArray0[3] = intent0;
      intentArray0[4] = intent0;
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      MenuItem menuItem1 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0).when(menu0).getItem(anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      menuWrapper0.clear();
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      
      com.actionbarsherlock.view.MenuItem menuItem2 = menuWrapper0.getItem(3391);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertEquals((-1), menuItem2.getItemId());
      assertFalse(menuItem2.isCheckable());
      assertEquals(';', menuItem2.getNumericShortcut());
      assertFalse(menuItem2.isEnabled());
      assertEquals('m', menuItem2.getAlphabeticShortcut());
      assertEquals((-1), menuItem2.getGroupId());
      assertFalse(menuItem2.isActionViewExpanded());
      assertTrue(menuItem2.collapseActionView());
      assertFalse(menuItem2.isVisible());
      assertEquals(0, menuItem2.getOrder());
      assertTrue(menuItem2.isChecked());
      assertFalse(menuItem2.expandActionView());
      assertTrue(menuItem2.hasSubMenu());
      assertNotNull(menuItem2);
      
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent[] intentArray0 = new Intent[9];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      intentArray0[0] = intent0;
      intentArray0[1] = intent0;
      intentArray0[2] = intent0;
      intentArray0[3] = intent0;
      intentArray0[4] = intent0;
      intentArray0[5] = intent0;
      intentArray0[6] = intent0;
      intentArray0[7] = intent0;
      intentArray0[8] = intent0;
      com.actionbarsherlock.view.MenuItem[] menuItemArray0 = new com.actionbarsherlock.view.MenuItem[8];
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0).when(menu0).add(anyInt() , anyInt() , anyInt() , any(java.lang.CharSequence.class));
      doReturn(menuItem0).when(menu0).getItem(anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      com.actionbarsherlock.view.MenuItem menuItem1 = menuWrapper0.add((-756), 9, 78, charSequence0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuItem1.collapseActionView());
      assertFalse(menuItem1.isActionViewExpanded());
      assertTrue(menuItem1.isChecked());
      assertEquals(')', menuItem1.getAlphabeticShortcut());
      assertEquals(2, menuItem1.getGroupId());
      assertFalse(menuItem1.isVisible());
      assertEquals(78, menuItem1.getOrder());
      assertFalse(menuItem1.isCheckable());
      assertEquals(1025, menuItem1.getItemId());
      assertFalse(menuItem1.isEnabled());
      assertFalse(menuItem1.hasSubMenu());
      assertTrue(menuItem1.expandActionView());
      assertEquals('T', menuItem1.getNumericShortcut());
      assertNotNull(menuItem1);
      
      menuWrapper0.clear();
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      
      com.actionbarsherlock.view.MenuItem menuItem2 = menuWrapper0.getItem(0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertEquals(1025, menuItem2.getItemId());
      assertEquals(78, menuItem2.getOrder());
      assertTrue(menuItem2.expandActionView());
      assertEquals('T', menuItem2.getNumericShortcut());
      assertFalse(menuItem2.isCheckable());
      assertEquals(2, menuItem2.getGroupId());
      assertFalse(menuItem2.isActionViewExpanded());
      assertTrue(menuItem2.isChecked());
      assertFalse(menuItem2.hasSubMenu());
      assertFalse(menuItem2.isVisible());
      assertFalse(menuItem2.collapseActionView());
      assertEquals(')', menuItem2.getAlphabeticShortcut());
      assertFalse(menuItem2.isEnabled());
      assertNotNull(menuItem2);
      assertFalse(menuItem2.equals((Object)menuItem1));
      assertNotSame(menuItem2, menuItem1);
      
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent[] intentArray0 = new Intent[9];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      intentArray0[0] = intent0;
      intentArray0[1] = intent0;
      intentArray0[2] = intent0;
      intentArray0[3] = intent0;
      intentArray0[4] = intent0;
      intentArray0[5] = intent0;
      intentArray0[6] = intent0;
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      MenuItem menuItem1 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0).when(menu0).getItem(anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      menuWrapper0.clear();
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      
      com.actionbarsherlock.view.MenuItem menuItem2 = menuWrapper0.getItem(0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(menuItem2.hasSubMenu());
      assertTrue(menuItem2.expandActionView());
      assertFalse(menuItem2.collapseActionView());
      assertEquals('+', menuItem2.getNumericShortcut());
      assertTrue(menuItem2.isCheckable());
      assertTrue(menuItem2.isEnabled());
      assertEquals('@', menuItem2.getAlphabeticShortcut());
      assertEquals(1, menuItem2.getItemId());
      assertEquals(548, menuItem2.getGroupId());
      assertTrue(menuItem2.isChecked());
      assertFalse(menuItem2.isActionViewExpanded());
      assertTrue(menuItem2.isVisible());
      assertEquals(1, menuItem2.getOrder());
      assertNotNull(menuItem2);
      
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent[] intentArray0 = new Intent[9];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      intentArray0[0] = intent0;
      intentArray0[1] = intent0;
      intentArray0[2] = intent0;
      intentArray0[3] = intent0;
      intentArray0[4] = intent0;
      intentArray0[5] = intent0;
      intentArray0[6] = intent0;
      intentArray0[7] = intent0;
      intentArray0[8] = intent0;
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((-1254)).when(menu0).addIntentOptions(anyInt() , anyInt() , anyInt() , any(android.content.ComponentName.class) , any(android.content.Intent[].class) , any(android.content.Intent.class) , anyInt() , any(android.view.MenuItem[].class));
      doReturn(menuItem0).when(menu0).findItem(anyInt());
      doReturn(false).when(menu0).isShortcutKey(anyInt() , any(android.view.KeyEvent.class));
      doReturn(false).when(menu0).performShortcut(anyInt() , any(android.view.KeyEvent.class) , anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      menuWrapper0.removeItem(9);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent[] intentArray0 = new Intent[8];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      intentArray0[1] = intentArray0[0];
      intentArray0[2] = intentArray0[1];
      intentArray0[3] = intentArray0[2];
      intentArray0[4] = intentArray0[3];
      intentArray0[5] = intentArray0[4];
      intentArray0[6] = intentArray0[5];
      intentArray0[7] = intentArray0[6];
      com.actionbarsherlock.view.MenuItem[] menuItemArray0 = new com.actionbarsherlock.view.MenuItem[0];
      com.actionbarsherlock.view.MenuItem menuItem1 = menuWrapper0.findItem(72);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertEquals(8, menuItem1.getGroupId());
      assertTrue(menuItem1.expandActionView());
      assertEquals(9, menuItem1.getOrder());
      assertFalse(menuItem1.isEnabled());
      assertFalse(menuItem1.isCheckable());
      assertEquals('H', menuItem1.getAlphabeticShortcut());
      assertTrue(menuItem1.hasSubMenu());
      assertEquals('E', menuItem1.getNumericShortcut());
      assertFalse(menuItem1.collapseActionView());
      assertEquals(1484, menuItem1.getItemId());
      assertTrue(menuItem1.isVisible());
      assertFalse(menuItem1.isChecked());
      assertFalse(menuItem1.isActionViewExpanded());
      assertNotNull(menuItem1);
      
      int int0 = menuWrapper0.addIntentOptions(153, 0, 153, componentName0, intentArray0, intentArray0[1], 8, menuItemArray0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertEquals((-1254), int0);
      assertEquals(8, intentArray0.length);
      assertEquals(0, menuItemArray0.length);
      
      menuWrapper0.clear();
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      
      KeyEvent keyEvent0 = mock(KeyEvent.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = menuWrapper0.isShortcutKey(1048576, keyEvent0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertFalse(boolean0);
      
      boolean boolean1 = menuWrapper0.performShortcut(16, (KeyEvent) null, 130);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SubMenu subMenu0 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(menu0).performIdentifierAction(anyInt() , anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      boolean boolean0 = menuWrapper0.performIdentifierAction(0, 0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MenuWrapper menuWrapper0 = new MenuWrapper((Menu) null);
      assertNotNull(menuWrapper0);
      
      int int0 = 186;
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      com.actionbarsherlock.view.MenuItem menuItem1 = menuWrapper0.findItem(menuItem0);
      assertFalse(menuItem1.hasSubMenu());
      assertFalse(menuItem1.expandActionView());
      assertEquals(186, menuItem1.getOrder());
      assertEquals((-2889), menuItem1.getGroupId());
      assertEquals('F', menuItem1.getNumericShortcut());
      assertFalse(menuItem1.isCheckable());
      assertFalse(menuItem1.isChecked());
      assertFalse(menuItem1.isActionViewExpanded());
      assertTrue(menuItem1.isVisible());
      assertFalse(menuItem1.isEnabled());
      assertFalse(menuItem1.collapseActionView());
      assertEquals('0', menuItem1.getAlphabeticShortcut());
      assertEquals(50, menuItem1.getItemId());
      assertNotNull(menuItem1);
      
      int int1 = 0;
      int int2 = (-1441);
      // Undeclared exception!
      try { 
        menuWrapper0.add((-2707));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      MenuItem menuItem1 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0).when(menu0).add(anyInt());
      doReturn(menuItem1).when(menu0).findItem(anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      com.actionbarsherlock.view.MenuItem menuItem2 = menuWrapper0.add(3612);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertTrue(menuItem2.isChecked());
      assertEquals(4, menuItem2.getItemId());
      assertTrue(menuItem2.isVisible());
      assertFalse(menuItem2.isActionViewExpanded());
      assertTrue(menuItem2.isEnabled());
      assertEquals('$', menuItem2.getAlphabeticShortcut());
      assertEquals('$', menuItem2.getNumericShortcut());
      assertTrue(menuItem2.collapseActionView());
      assertEquals(0, menuItem2.getGroupId());
      assertEquals(4, menuItem2.getOrder());
      assertTrue(menuItem2.expandActionView());
      assertTrue(menuItem2.hasSubMenu());
      assertTrue(menuItem2.isCheckable());
      assertNotNull(menuItem2);
      
      com.actionbarsherlock.view.MenuItem menuItem3 = menuWrapper0.findItem(3612);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(menuItem3.isActionViewExpanded());
      assertFalse(menuItem3.collapseActionView());
      assertFalse(menuItem3.isVisible());
      assertEquals(0, menuItem3.getItemId());
      assertEquals('a', menuItem3.getAlphabeticShortcut());
      assertFalse(menuItem3.isChecked());
      assertEquals(0, menuItem3.getOrder());
      assertEquals(0, menuItem3.getGroupId());
      assertFalse(menuItem3.expandActionView());
      assertEquals('a', menuItem3.getNumericShortcut());
      assertFalse(menuItem3.hasSubMenu());
      assertFalse(menuItem3.isCheckable());
      assertFalse(menuItem3.isEnabled());
      assertNotNull(menuItem3);
      assertFalse(menuItem3.equals((Object)menuItem2));
      assertNotSame(menuItem3, menuItem2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(74).when(menu0).size();
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(74, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      int int0 = menuWrapper0.size();
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(74, menuWrapper0.size());
      assertEquals(74, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SubMenu subMenu0 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      doReturn((MenuItem) null, (MenuItem) null).when(subMenu0).getItem();
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(subMenu0).when(menu0).addSubMenu(anyInt() , anyInt() , anyInt() , any(java.lang.CharSequence.class));
      doReturn(menuItem0).when(menu0).findItem(anyInt());
      doReturn(menuItem0).when(menu0).getItem(anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      int int0 = (-3255);
      com.actionbarsherlock.view.MenuItem menuItem1 = menuWrapper0.findItem((-3255));
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuItem1.isVisible());
      assertFalse(menuItem1.collapseActionView());
      assertFalse(menuItem1.isEnabled());
      assertEquals('a', menuItem1.getNumericShortcut());
      assertFalse(menuItem1.expandActionView());
      assertFalse(menuItem1.hasSubMenu());
      assertFalse(menuItem1.isCheckable());
      assertEquals(0, menuItem1.getItemId());
      assertEquals(0, menuItem1.getOrder());
      assertFalse(menuItem1.isChecked());
      assertEquals('a', menuItem1.getAlphabeticShortcut());
      assertEquals(0, menuItem1.getGroupId());
      assertFalse(menuItem1.isActionViewExpanded());
      assertNotNull(menuItem1);
      
      int int1 = 0;
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      int int2 = 879;
      com.actionbarsherlock.view.MenuItem menuItem2 = menuWrapper0.getItem(879);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertEquals('a', menuItem2.getNumericShortcut());
      assertFalse(menuItem2.isEnabled());
      assertFalse(menuItem2.collapseActionView());
      assertEquals(0, menuItem2.getOrder());
      assertFalse(menuItem2.isVisible());
      assertEquals('a', menuItem2.getAlphabeticShortcut());
      assertFalse(menuItem2.isChecked());
      assertFalse(menuItem2.isActionViewExpanded());
      assertEquals(0, menuItem2.getGroupId());
      assertFalse(menuItem2.expandActionView());
      assertFalse(menuItem2.hasSubMenu());
      assertEquals(0, menuItem2.getItemId());
      assertFalse(menuItem2.isCheckable());
      assertNotNull(menuItem2);
      assertSame(menuItem2, menuItem1);
      
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu(0, 0, 0, charSequence0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((-1254)).when(menu0).addIntentOptions(anyInt() , anyInt() , anyInt() , any(android.content.ComponentName.class) , any(android.content.Intent[].class) , any(android.content.Intent.class) , anyInt() , any(android.view.MenuItem[].class));
      doReturn(menuItem0).when(menu0).findItem(anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent[] intentArray0 = new Intent[8];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      intentArray0[1] = intentArray0[0];
      intentArray0[2] = intentArray0[1];
      intentArray0[3] = intentArray0[2];
      intentArray0[4] = intentArray0[3];
      intentArray0[5] = intentArray0[4];
      intentArray0[6] = intentArray0[5];
      intentArray0[7] = intentArray0[6];
      com.actionbarsherlock.view.MenuItem[] menuItemArray0 = new com.actionbarsherlock.view.MenuItem[0];
      com.actionbarsherlock.view.MenuItem menuItem1 = menuWrapper0.findItem(72);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(menuItem1.isActionViewExpanded());
      assertEquals(0, menuItem1.getGroupId());
      assertFalse(menuItem1.isChecked());
      assertEquals('a', menuItem1.getAlphabeticShortcut());
      assertFalse(menuItem1.isVisible());
      assertFalse(menuItem1.collapseActionView());
      assertFalse(menuItem1.isEnabled());
      assertEquals('a', menuItem1.getNumericShortcut());
      assertEquals(0, menuItem1.getItemId());
      assertFalse(menuItem1.isCheckable());
      assertEquals(0, menuItem1.getOrder());
      assertFalse(menuItem1.hasSubMenu());
      assertFalse(menuItem1.expandActionView());
      assertNotNull(menuItem1);
      
      int int0 = menuWrapper0.addIntentOptions(153, 0, 153, componentName0, intentArray0, intentArray0[1], 8, menuItemArray0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals((-1254), int0);
      assertEquals(8, intentArray0.length);
      assertEquals(0, menuItemArray0.length);
      
      menuWrapper0.clear();
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(126).when(menu0).addIntentOptions(anyInt() , anyInt() , anyInt() , any(android.content.ComponentName.class) , any(android.content.Intent[].class) , any(android.content.Intent.class) , anyInt() , any(android.view.MenuItem[].class));
      doReturn(menuItem0).when(menu0).findItem(anyInt());
      doReturn((String) null).when(menu0).toString();
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent[] intentArray0 = new Intent[18];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      intentArray0[1] = intentArray0[0];
      intentArray0[2] = intentArray0[1];
      intentArray0[3] = intentArray0[2];
      intentArray0[4] = intentArray0[3];
      intentArray0[5] = intentArray0[3];
      intentArray0[6] = intentArray0[5];
      intentArray0[7] = intentArray0[6];
      com.actionbarsherlock.view.MenuItem[] menuItemArray0 = new com.actionbarsherlock.view.MenuItem[0];
      com.actionbarsherlock.view.MenuItem menuItem1 = menuWrapper0.findItem(72);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuItem1.isCheckable());
      assertEquals(816, menuItem1.getOrder());
      assertEquals('%', menuItem1.getNumericShortcut());
      assertEquals('%', menuItem1.getAlphabeticShortcut());
      assertTrue(menuItem1.isEnabled());
      assertFalse(menuItem1.collapseActionView());
      assertFalse(menuItem1.isChecked());
      assertTrue(menuItem1.isActionViewExpanded());
      assertEquals(816, menuItem1.getItemId());
      assertTrue(menuItem1.isVisible());
      assertFalse(menuItem1.hasSubMenu());
      assertEquals((-12), menuItem1.getGroupId());
      assertTrue(menuItem1.expandActionView());
      assertNotNull(menuItem1);
      
      int int0 = menuWrapper0.addIntentOptions(3205, 0, 3205, componentName0, intentArray0, intentArray0[1], 8, menuItemArray0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertEquals(126, int0);
      assertEquals(18, intentArray0.length);
      assertEquals(0, menuItemArray0.length);
      
      menuWrapper0.clear();
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      
      Menu menu1 = menuWrapper0.unwrap();
      assertFalse(menu1.hasVisibleItems());
      assertEquals(0, menu1.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menu1);
      assertSame(menu1, menu0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      SubMenu subMenu0 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      MenuItem menuItem1 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((MenuItem) null).when(menu0).add(anyInt());
      doReturn(menuItem0).when(menu0).add(anyInt() , anyInt() , anyInt() , anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      int int0 = 1260;
      com.actionbarsherlock.view.MenuItem menuItem2 = menuWrapper0.add(1260, 1577, 1260, 1577);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertEquals('Y', menuItem2.getNumericShortcut());
      assertFalse(menuItem2.isCheckable());
      assertEquals(268435456, menuItem2.getItemId());
      assertFalse(menuItem2.expandActionView());
      assertFalse(menuItem2.isEnabled());
      assertEquals('z', menuItem2.getAlphabeticShortcut());
      assertTrue(menuItem2.hasSubMenu());
      assertFalse(menuItem2.isChecked());
      assertFalse(menuItem2.collapseActionView());
      assertFalse(menuItem2.isActionViewExpanded());
      assertTrue(menuItem2.isVisible());
      assertEquals(268435456, menuItem2.getOrder());
      assertEquals(7, menuItem2.getGroupId());
      assertNotNull(menuItem2);
      
      menuWrapper0.setGroupEnabled(612, false);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      
      // Undeclared exception!
      try { 
        menuWrapper0.add(7);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      SubMenu subMenu0 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      doReturn((MenuItem) null).when(subMenu0).add(anyInt());
      doReturn(menuItem0, menuItem0).when(subMenu0).getItem();
      MenuItem menuItem1 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(subMenu0).when(menu0).addSubMenu(anyInt() , anyInt() , anyInt() , anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      MenuItem menuItem2 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      com.actionbarsherlock.view.MenuItem menuItem3 = menuWrapper0.findItem(menuItem2);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuItem3.getItemId());
      assertEquals(0, menuItem3.getGroupId());
      assertEquals('y', menuItem3.getNumericShortcut());
      assertFalse(menuItem3.isCheckable());
      assertTrue(menuItem3.hasSubMenu());
      assertTrue(menuItem3.isVisible());
      assertEquals('y', menuItem3.getAlphabeticShortcut());
      assertFalse(menuItem3.collapseActionView());
      assertFalse(menuItem3.expandActionView());
      assertEquals(0, menuItem3.getOrder());
      assertTrue(menuItem3.isActionViewExpanded());
      assertTrue(menuItem3.isChecked());
      assertTrue(menuItem3.isEnabled());
      assertNotNull(menuItem3);
      
      com.actionbarsherlock.view.SubMenu subMenu1 = menuWrapper0.addSubMenu(0, 1, 1, 0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertTrue(subMenu1.hasVisibleItems());
      assertEquals(1, subMenu1.size());
      assertNotNull(subMenu1);
      
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ((MenuWrapper) subMenu1).add((-2212));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MenuWrapper menuWrapper0 = new MenuWrapper((Menu) null);
      assertNotNull(menuWrapper0);
      
      int int0 = 186;
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      com.actionbarsherlock.view.MenuItem menuItem1 = menuWrapper0.findItem(menuItem0);
      assertEquals(1436, menuItem1.getGroupId());
      assertFalse(menuItem1.isActionViewExpanded());
      assertEquals('c', menuItem1.getAlphabeticShortcut());
      assertFalse(menuItem1.collapseActionView());
      assertFalse(menuItem1.isVisible());
      assertTrue(menuItem1.isEnabled());
      assertFalse(menuItem1.expandActionView());
      assertFalse(menuItem1.hasSubMenu());
      assertTrue(menuItem1.isChecked());
      assertFalse(menuItem1.isCheckable());
      assertEquals(0, menuItem1.getItemId());
      assertEquals('Z', menuItem1.getNumericShortcut());
      assertEquals((-513), menuItem1.getOrder());
      assertNotNull(menuItem1);
      
      int int1 = 0;
      int int2 = (-1441);
      // Undeclared exception!
      try { 
        menuWrapper0.add((-2707));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      MenuItem menuItem1 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((-1748)).when(menu0).addIntentOptions(anyInt() , anyInt() , anyInt() , any(android.content.ComponentName.class) , any(android.content.Intent[].class) , any(android.content.Intent.class) , anyInt() , any(android.view.MenuItem[].class));
      doReturn(menuItem0).when(menu0).findItem(anyInt());
      doReturn(menuItem1, menuItem0).when(menu0).getItem(anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      com.actionbarsherlock.view.MenuItem menuItem2 = menuWrapper0.getItem(93);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuItem2.getOrder());
      assertFalse(menuItem2.isVisible());
      assertFalse(menuItem2.isActionViewExpanded());
      assertEquals('\u0000', menuItem2.getAlphabeticShortcut());
      assertFalse(menuItem2.isChecked());
      assertEquals(0, menuItem2.getGroupId());
      assertFalse(menuItem2.expandActionView());
      assertFalse(menuItem2.isCheckable());
      assertFalse(menuItem2.hasSubMenu());
      assertEquals(0, menuItem2.getItemId());
      assertEquals('\u0000', menuItem2.getNumericShortcut());
      assertFalse(menuItem2.isEnabled());
      assertFalse(menuItem2.collapseActionView());
      assertNotNull(menuItem2);
      
      com.actionbarsherlock.view.MenuItem menuItem3 = menuWrapper0.getItem(302);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals('\u0000', menuItem3.getAlphabeticShortcut());
      assertFalse(menuItem3.collapseActionView());
      assertFalse(menuItem3.isChecked());
      assertFalse(menuItem3.isVisible());
      assertEquals('\u0000', menuItem3.getNumericShortcut());
      assertFalse(menuItem3.expandActionView());
      assertFalse(menuItem3.hasSubMenu());
      assertFalse(menuItem3.isActionViewExpanded());
      assertEquals(0, menuItem3.getOrder());
      assertEquals(0, menuItem3.getGroupId());
      assertFalse(menuItem3.isCheckable());
      assertEquals(0, menuItem3.getItemId());
      assertFalse(menuItem3.isEnabled());
      assertNotNull(menuItem3);
      assertFalse(menuItem3.equals((Object)menuItem2));
      assertNotSame(menuItem3, menuItem2);
      
      menuWrapper0.clear();
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      
      com.actionbarsherlock.view.MenuItem menuItem4 = menuWrapper0.findItem(302);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(menuItem4.isVisible());
      assertFalse(menuItem4.isActionViewExpanded());
      assertFalse(menuItem4.isChecked());
      assertFalse(menuItem4.collapseActionView());
      assertFalse(menuItem4.hasSubMenu());
      assertEquals(0, menuItem4.getItemId());
      assertEquals('\u0000', menuItem4.getAlphabeticShortcut());
      assertFalse(menuItem4.expandActionView());
      assertEquals(0, menuItem4.getOrder());
      assertEquals(0, menuItem4.getGroupId());
      assertEquals('\u0000', menuItem4.getNumericShortcut());
      assertFalse(menuItem4.isCheckable());
      assertFalse(menuItem4.isEnabled());
      assertNotNull(menuItem4);
      assertFalse(menuItem4.equals((Object)menuItem2));
      assertFalse(menuItem4.equals((Object)menuItem3));
      assertNotSame(menuItem4, menuItem2);
      assertNotSame(menuItem4, menuItem3);
      
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent[] intentArray0 = new Intent[8];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      intentArray0[0] = intent0;
      intentArray0[1] = intent0;
      intentArray0[2] = intent0;
      intentArray0[3] = intent0;
      intentArray0[4] = intent0;
      intentArray0[5] = intent0;
      intentArray0[6] = intent0;
      intentArray0[7] = intent0;
      com.actionbarsherlock.view.MenuItem[] menuItemArray0 = new com.actionbarsherlock.view.MenuItem[7];
      menuItemArray0[0] = menuItem4;
      menuItemArray0[1] = menuItem2;
      menuItemArray0[2] = menuItem2;
      menuItemArray0[3] = menuItem4;
      menuItemArray0[4] = menuItem3;
      menuItemArray0[5] = menuItem4;
      menuItemArray0[6] = menuItem4;
      // Undeclared exception!
      try { 
        menuWrapper0.addIntentOptions(0, 0, 1206, componentName0, intentArray0, intent0, 16777216, menuItemArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0).when(menu0).add(any(java.lang.CharSequence.class));
      doReturn((MenuItem) null).when(menu0).add(anyInt() , anyInt() , anyInt() , any(java.lang.CharSequence.class));
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      int int0 = 1904;
      com.actionbarsherlock.view.MenuItem menuItem1 = menuWrapper0.add((CharSequence) null);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals('a', menuItem1.getNumericShortcut());
      assertFalse(menuItem1.hasSubMenu());
      assertFalse(menuItem1.expandActionView());
      assertEquals('a', menuItem1.getAlphabeticShortcut());
      assertFalse(menuItem1.isCheckable());
      assertFalse(menuItem1.isChecked());
      assertEquals(0, menuItem1.getOrder());
      assertFalse(menuItem1.isActionViewExpanded());
      assertEquals(0, menuItem1.getGroupId());
      assertFalse(menuItem1.isEnabled());
      assertFalse(menuItem1.isVisible());
      assertEquals(0, menuItem1.getItemId());
      assertFalse(menuItem1.collapseActionView());
      assertNotNull(menuItem1);
      
      KeyEvent keyEvent0 = mock(KeyEvent.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        menuWrapper0.add(168, 0, 146, (CharSequence) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0, (MenuItem) null).when(menu0).add(anyInt() , anyInt() , anyInt() , anyInt());
      doReturn(true).when(menu0).hasVisibleItems();
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertTrue(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      com.actionbarsherlock.view.MenuItem menuItem1 = menuWrapper0.add(2838, 2838, 2838, 2838);
      assertTrue(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuItem1.isCheckable());
      assertEquals(0, menuItem1.getItemId());
      assertFalse(menuItem1.isEnabled());
      assertFalse(menuItem1.collapseActionView());
      assertEquals(0, menuItem1.getOrder());
      assertFalse(menuItem1.isVisible());
      assertFalse(menuItem1.hasSubMenu());
      assertEquals(0, menuItem1.getGroupId());
      assertFalse(menuItem1.expandActionView());
      assertFalse(menuItem1.isActionViewExpanded());
      assertEquals('\u0000', menuItem1.getAlphabeticShortcut());
      assertFalse(menuItem1.isChecked());
      assertEquals('\u0000', menuItem1.getNumericShortcut());
      assertNotNull(menuItem1);
      
      boolean boolean0 = menuWrapper0.hasVisibleItems();
      assertTrue(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        menuWrapper0.add(2838, 362, 0, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MenuWrapper menuWrapper0 = new MenuWrapper((Menu) null);
      assertNotNull(menuWrapper0);
      
      KeyEvent keyEvent0 = mock(KeyEvent.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        menuWrapper0.performShortcut((-890), keyEvent0, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      MenuWrapper menuWrapper0 = new MenuWrapper((Menu) null);
      assertNotNull(menuWrapper0);
      
      int int0 = (-119);
      // Undeclared exception!
      try { 
        menuWrapper0.performIdentifierAction(0, 1595);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      SubMenu subMenu0 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0, menuItem0).when(subMenu0).getItem();
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((MenuItem) null).when(menu0).add(any(java.lang.CharSequence.class));
      doReturn(subMenu0).when(menu0).addSubMenu(anyInt() , anyInt() , anyInt() , anyInt());
      doReturn((MenuItem) null).when(menu0).findItem(anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      int int0 = 0;
      MenuItem menuItem1 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      com.actionbarsherlock.view.MenuItem menuItem2 = menuWrapper0.findItem(menuItem1);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertTrue(menuItem2.isEnabled());
      assertEquals(0, menuItem2.getGroupId());
      assertEquals(0, menuItem2.getItemId());
      assertFalse(menuItem2.isCheckable());
      assertTrue(menuItem2.hasSubMenu());
      assertFalse(menuItem2.expandActionView());
      assertTrue(menuItem2.isChecked());
      assertTrue(menuItem2.isActionViewExpanded());
      assertEquals('y', menuItem2.getAlphabeticShortcut());
      assertEquals('y', menuItem2.getNumericShortcut());
      assertFalse(menuItem2.collapseActionView());
      assertEquals(0, menuItem2.getOrder());
      assertTrue(menuItem2.isVisible());
      assertNotNull(menuItem2);
      
      com.actionbarsherlock.view.SubMenu subMenu1 = menuWrapper0.addSubMenu(0, 1, 1, 0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertEquals(0, subMenu1.size());
      assertFalse(subMenu1.hasVisibleItems());
      assertNotNull(subMenu1);
      
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      com.actionbarsherlock.view.MenuItem menuItem3 = menuWrapper0.findItem(0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNull(menuItem3);
      
      // Undeclared exception!
      try { 
        menuWrapper0.add(charSequence0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0, (MenuItem) null).when(menu0).add(anyInt());
      doReturn((MenuItem) null).when(menu0).findItem(anyInt());
      doReturn((MenuItem) null).when(menu0).getItem(anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      int int0 = (-985);
      com.actionbarsherlock.view.MenuItem menuItem1 = menuWrapper0.add((-985));
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuItem1.getOrder());
      assertFalse(menuItem1.isChecked());
      assertEquals('a', menuItem1.getAlphabeticShortcut());
      assertFalse(menuItem1.isVisible());
      assertFalse(menuItem1.collapseActionView());
      assertFalse(menuItem1.isEnabled());
      assertEquals(0, menuItem1.getItemId());
      assertFalse(menuItem1.isCheckable());
      assertFalse(menuItem1.hasSubMenu());
      assertEquals(0, menuItem1.getGroupId());
      assertEquals('a', menuItem1.getNumericShortcut());
      assertFalse(menuItem1.expandActionView());
      assertFalse(menuItem1.isActionViewExpanded());
      assertNotNull(menuItem1);
      
      com.actionbarsherlock.view.MenuItem menuItem2 = menuWrapper0.findItem((-985));
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNull(menuItem2);
      
      com.actionbarsherlock.view.MenuItem menuItem3 = menuWrapper0.getItem(1);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNull(menuItem3);
      
      // Undeclared exception!
      try { 
        menuWrapper0.add((-985));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(126).when(menu0).addIntentOptions(anyInt() , anyInt() , anyInt() , any(android.content.ComponentName.class) , any(android.content.Intent[].class) , any(android.content.Intent.class) , anyInt() , any(android.view.MenuItem[].class));
      doReturn(menuItem0).when(menu0).findItem(anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent[] intentArray0 = new Intent[8];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      intentArray0[0] = intent0;
      intentArray0[1] = intent0;
      intentArray0[2] = intent0;
      intentArray0[3] = intent0;
      intentArray0[4] = intent0;
      intentArray0[5] = intent0;
      intentArray0[6] = intent0;
      intentArray0[7] = intent0;
      com.actionbarsherlock.view.MenuItem[] menuItemArray0 = new com.actionbarsherlock.view.MenuItem[0];
      com.actionbarsherlock.view.MenuItem menuItem1 = menuWrapper0.findItem(72);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertEquals(0, menuItem1.getOrder());
      assertFalse(menuItem1.hasSubMenu());
      assertFalse(menuItem1.collapseActionView());
      assertFalse(menuItem1.expandActionView());
      assertEquals(0, menuItem1.getGroupId());
      assertFalse(menuItem1.isVisible());
      assertEquals('a', menuItem1.getAlphabeticShortcut());
      assertEquals('a', menuItem1.getNumericShortcut());
      assertFalse(menuItem1.isChecked());
      assertFalse(menuItem1.isActionViewExpanded());
      assertFalse(menuItem1.isEnabled());
      assertEquals(0, menuItem1.getItemId());
      assertFalse(menuItem1.isCheckable());
      assertNotNull(menuItem1);
      
      int int0 = menuWrapper0.addIntentOptions(153, 0, 153, componentName0, intentArray0, intent0, 8, menuItemArray0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertEquals(126, int0);
      assertEquals(8, intentArray0.length);
      assertEquals(0, menuItemArray0.length);
      
      menuWrapper0.clear();
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SubMenu subMenu0 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      doReturn((MenuItem) null, (MenuItem) null).when(subMenu0).getItem();
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(subMenu0).when(menu0).addSubMenu(anyInt() , anyInt() , anyInt() , anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      int int0 = 0;
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      com.actionbarsherlock.view.MenuItem menuItem1 = menuWrapper0.findItem(menuItem0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuItem1.getGroupId());
      assertTrue(menuItem1.isEnabled());
      assertEquals('y', menuItem1.getNumericShortcut());
      assertFalse(menuItem1.isCheckable());
      assertTrue(menuItem1.isVisible());
      assertEquals(0, menuItem1.getItemId());
      assertTrue(menuItem1.isActionViewExpanded());
      assertFalse(menuItem1.expandActionView());
      assertTrue(menuItem1.isChecked());
      assertEquals(0, menuItem1.getOrder());
      assertEquals('y', menuItem1.getAlphabeticShortcut());
      assertTrue(menuItem1.hasSubMenu());
      assertFalse(menuItem1.collapseActionView());
      assertNotNull(menuItem1);
      
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu(0, 1, 1, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SubMenu subMenu0 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      doReturn((MenuItem) null, (MenuItem) null).when(subMenu0).getItem();
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(subMenu0).when(menu0).addSubMenu(anyInt() , anyInt() , anyInt() , any(java.lang.CharSequence.class));
      doReturn(menuItem0).when(menu0).getItem(anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      com.actionbarsherlock.view.MenuItem menuItem1 = menuWrapper0.getItem(1506);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuItem1.isCheckable());
      assertFalse(menuItem1.isEnabled());
      assertEquals(0, menuItem1.getOrder());
      assertFalse(menuItem1.isChecked());
      assertFalse(menuItem1.collapseActionView());
      assertFalse(menuItem1.isActionViewExpanded());
      assertEquals('a', menuItem1.getAlphabeticShortcut());
      assertFalse(menuItem1.isVisible());
      assertEquals('a', menuItem1.getNumericShortcut());
      assertFalse(menuItem1.hasSubMenu());
      assertEquals(0, menuItem1.getItemId());
      assertFalse(menuItem1.expandActionView());
      assertEquals(0, menuItem1.getGroupId());
      assertNotNull(menuItem1);
      
      int int0 = 0;
      menuWrapper0.removeItem(0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      
      CharSequence charSequence0 = null;
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu((-1657), (-1657), (-1657), (CharSequence) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SubMenu subMenu0 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      doReturn((MenuItem) null, (MenuItem) null).when(subMenu0).getItem();
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(subMenu0).when(menu0).addSubMenu(any(java.lang.CharSequence.class));
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      int int0 = 121;
      menuWrapper0.clear();
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      
      menuWrapper0.clear();
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence1 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu(charSequence1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SubMenu subMenu0 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      doReturn((MenuItem) null, (MenuItem) null).when(subMenu0).getItem();
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(subMenu0).when(menu0).addSubMenu(anyInt() , anyInt() , anyInt() , anyInt());
      doReturn(false).when(menu0).performShortcut(anyInt() , any(android.view.KeyEvent.class) , anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      int int0 = 0;
      KeyEvent keyEvent0 = mock(KeyEvent.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = menuWrapper0.performShortcut(2418, keyEvent0, (-2375));
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertFalse(boolean0);
      
      menuWrapper0.setGroupCheckable((-1), true, false);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      com.actionbarsherlock.view.MenuItem menuItem1 = menuWrapper0.findItem(menuItem0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertTrue(menuItem1.isActionViewExpanded());
      assertEquals(1, menuItem1.getOrder());
      assertFalse(menuItem1.isChecked());
      assertTrue(menuItem1.collapseActionView());
      assertFalse(menuItem1.isVisible());
      assertEquals(1317, menuItem1.getGroupId());
      assertEquals(1317, menuItem1.getItemId());
      assertFalse(menuItem1.isEnabled());
      assertTrue(menuItem1.expandActionView());
      assertEquals('q', menuItem1.getAlphabeticShortcut());
      assertTrue(menuItem1.isCheckable());
      assertEquals('q', menuItem1.getNumericShortcut());
      assertTrue(menuItem1.hasSubMenu());
      assertNotNull(menuItem1);
      
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu(0, 1, 1, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SubMenu subMenu0 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      doReturn((MenuItem) null, (MenuItem) null).when(subMenu0).getItem();
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(subMenu0).when(menu0).addSubMenu(anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu((-51));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MenuWrapper menuWrapper0 = new MenuWrapper((Menu) null);
      assertNotNull(menuWrapper0);
      
      // Undeclared exception!
      try { 
        menuWrapper0.setQwertyMode(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(menu0).isShortcutKey(anyInt() , any(android.view.KeyEvent.class));
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      KeyEvent keyEvent0 = mock(KeyEvent.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = menuWrapper0.isShortcutKey(1059, keyEvent0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MenuWrapper menuWrapper0 = new MenuWrapper((Menu) null);
      assertNotNull(menuWrapper0);
      
      // Undeclared exception!
      try { 
        menuWrapper0.findItem(1357);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MenuWrapper menuWrapper0 = new MenuWrapper((Menu) null);
      assertNotNull(menuWrapper0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        menuWrapper0.getItem(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Menu menu0 = null;
      MenuWrapper menuWrapper0 = new MenuWrapper((Menu) null);
      assertNotNull(menuWrapper0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        menuWrapper0.removeItem(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((SubMenu) null).when(menu0).addSubMenu(anyInt() , anyInt() , anyInt() , anyInt());
      doReturn(false).when(menu0).performIdentifierAction(anyInt() , anyInt());
      doReturn(false).when(menu0).performShortcut(anyInt() , any(android.view.KeyEvent.class) , anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      menuWrapper0.removeItem(2);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      
      boolean boolean0 = menuWrapper0.performIdentifierAction((-4300), (-4300));
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertFalse(boolean0);
      
      KeyEvent keyEvent0 = mock(KeyEvent.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = menuWrapper0.performShortcut((-4300), keyEvent0, 118);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = 1002;
      int int1 = 1;
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu((-1205), 193, (-907), 79);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((MenuItem) null).when(menu0).add(anyInt());
      doReturn(false).when(menu0).performIdentifierAction(anyInt() , anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      KeyEvent keyEvent0 = mock(KeyEvent.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = menuWrapper0.performIdentifierAction(175, 2);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        menuWrapper0.add(3612);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MenuWrapper menuWrapper0 = new MenuWrapper((Menu) null);
      assertNotNull(menuWrapper0);
      
      int int0 = 0;
      int int1 = 722;
      ComponentName componentName0 = null;
      Intent[] intentArray0 = new Intent[8];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      intentArray0[0] = intent0;
      intentArray0[1] = intent0;
      intentArray0[2] = intent0;
      intentArray0[3] = intent0;
      intentArray0[4] = intent0;
      intentArray0[5] = intent0;
      intentArray0[6] = intent0;
      intentArray0[7] = intent0;
      int int2 = 0;
      com.actionbarsherlock.view.MenuItem[] menuItemArray0 = new com.actionbarsherlock.view.MenuItem[1];
      // Undeclared exception!
      try { 
        menuWrapper0.add(8388608, 1073741824, 0, (CharSequence) "android.intent.extra.BCC");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((MenuItem) null).when(menu0).getItem(anyInt());
      doReturn(false).when(menu0).performShortcut(anyInt() , any(android.view.KeyEvent.class) , anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      KeyEvent keyEvent0 = mock(KeyEvent.class, new ViolatedAssumptionAnswer());
      com.actionbarsherlock.view.MenuItem menuItem0 = menuWrapper0.getItem(184);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNull(menuItem0);
      
      boolean boolean0 = menuWrapper0.performShortcut(0, keyEvent0, 17);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertFalse(boolean0);
      
      menuWrapper0.removeGroup(100);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MenuWrapper menuWrapper0 = new MenuWrapper((Menu) null);
      assertNotNull(menuWrapper0);
      
      // Undeclared exception!
      try { 
        menuWrapper0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((SubMenu) null).when(menu0).addSubMenu(any(java.lang.CharSequence.class));
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      com.actionbarsherlock.view.MenuItem menuItem0 = menuWrapper0.findItem((MenuItem) null);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNull(menuItem0);
      
      CharSequence charSequence0 = null;
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      menuWrapper0.removeItem((-3838));
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(menu0).addIntentOptions(anyInt() , anyInt() , anyInt() , any(android.content.ComponentName.class) , any(android.content.Intent[].class) , any(android.content.Intent.class) , anyInt() , any(android.view.MenuItem[].class));
      doReturn((MenuItem) null).when(menu0).getItem(anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      com.actionbarsherlock.view.MenuItem menuItem0 = menuWrapper0.getItem(278);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNull(menuItem0);
      
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent[] intentArray0 = new Intent[4];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      intentArray0[0] = intent0;
      intentArray0[1] = intent0;
      intentArray0[2] = intent0;
      intentArray0[3] = intent0;
      com.actionbarsherlock.view.MenuItem[] menuItemArray0 = new com.actionbarsherlock.view.MenuItem[9];
      menuItemArray0[0] = null;
      menuItemArray0[1] = null;
      menuItemArray0[2] = null;
      menuItemArray0[3] = null;
      menuItemArray0[4] = null;
      menuItemArray0[5] = null;
      menuItemArray0[6] = null;
      menuItemArray0[7] = null;
      menuItemArray0[8] = null;
      // Undeclared exception!
      try { 
        menuWrapper0.addIntentOptions((-1349), 1995, 3208, componentName0, intentArray0, intent0, 268435456, menuItemArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(menu0).addIntentOptions(anyInt() , anyInt() , anyInt() , any(android.content.ComponentName.class) , any(android.content.Intent[].class) , any(android.content.Intent.class) , anyInt() , any(android.view.MenuItem[].class));
      doReturn((SubMenu) null).when(menu0).addSubMenu(anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      int int0 = 1260;
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent[] intentArray0 = new Intent[9];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      intentArray0[0] = intent0;
      intentArray0[1] = intent0;
      intentArray0[2] = intent0;
      intentArray0[3] = intent0;
      intentArray0[4] = intent0;
      intentArray0[5] = intent0;
      intentArray0[6] = intent0;
      intentArray0[7] = intent0;
      intentArray0[8] = intent0;
      com.actionbarsherlock.view.MenuItem[] menuItemArray0 = new com.actionbarsherlock.view.MenuItem[0];
      int int1 = menuWrapper0.addIntentOptions((-620), 3007, 1260, componentName0, intentArray0, intent0, 4791, menuItemArray0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(9, intentArray0.length);
      assertEquals(0, menuItemArray0.length);
      
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu(1260);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(menu0).addIntentOptions(anyInt() , anyInt() , anyInt() , any(android.content.ComponentName.class) , any(android.content.Intent[].class) , any(android.content.Intent.class) , anyInt() , any(android.view.MenuItem[].class));
      doReturn((MenuItem) null).when(menu0).findItem(anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      com.actionbarsherlock.view.MenuItem menuItem0 = menuWrapper0.findItem(0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNull(menuItem0);
      
      boolean boolean0 = true;
      menuWrapper0.setGroupEnabled(0, true);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent[] intentArray0 = new Intent[0];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      com.actionbarsherlock.view.MenuItem[] menuItemArray0 = new com.actionbarsherlock.view.MenuItem[5];
      menuItemArray0[0] = null;
      menuItemArray0[1] = null;
      menuItemArray0[2] = null;
      menuItemArray0[3] = null;
      menuItemArray0[4] = null;
      // Undeclared exception!
      try { 
        menuWrapper0.addIntentOptions(0, 0, 0, componentName0, intentArray0, intent0, 1073741824, menuItemArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent[] intentArray0 = new Intent[1];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      intentArray0[0] = intent0;
      // Undeclared exception!
      try { 
        menuWrapper0.addIntentOptions(0, (-2538), 0, componentName0, intentArray0, intent0, 398, (com.actionbarsherlock.view.MenuItem[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MenuWrapper menuWrapper0 = new MenuWrapper((Menu) null);
      assertNotNull(menuWrapper0);
      
      int int0 = 35;
      // Undeclared exception!
      try { 
        menuWrapper0.setGroupVisible(35, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((SubMenu) null).when(menu0).addSubMenu(anyInt() , anyInt() , anyInt() , any(java.lang.CharSequence.class));
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu(5063, 771, 0, charSequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      menuWrapper0.removeItem(0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((MenuItem) null).when(menu0).add(any(java.lang.CharSequence.class));
      doReturn((MenuItem) null, (MenuItem) null).when(menu0).findItem(anyInt());
      doReturn((MenuItem) null, (MenuItem) null).when(menu0).getItem(anyInt());
      doReturn(false).when(menu0).hasVisibleItems();
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      int int0 = 0;
      com.actionbarsherlock.view.MenuItem menuItem0 = menuWrapper0.getItem(0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNull(menuItem0);
      
      int int1 = (-29);
      com.actionbarsherlock.view.MenuItem menuItem1 = menuWrapper0.findItem((-29));
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNull(menuItem1);
      
      menuWrapper0.clear();
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      
      boolean boolean0 = menuWrapper0.hasVisibleItems();
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertFalse(boolean0);
      
      com.actionbarsherlock.view.MenuItem menuItem2 = menuWrapper0.findItem((-29));
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNull(menuItem2);
      
      com.actionbarsherlock.view.MenuItem menuItem3 = menuWrapper0.getItem(0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNull(menuItem3);
      
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        menuWrapper0.add(charSequence0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((MenuItem) null).when(menu0).add(any(java.lang.CharSequence.class));
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        menuWrapper0.add(charSequence0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      com.actionbarsherlock.view.MenuItem menuItem1 = menuWrapper0.findItem(menuItem0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals('\u0000', menuItem1.getAlphabeticShortcut());
      assertFalse(menuItem1.hasSubMenu());
      assertFalse(menuItem1.collapseActionView());
      assertFalse(menuItem1.isVisible());
      assertFalse(menuItem1.isActionViewExpanded());
      assertFalse(menuItem1.isChecked());
      assertEquals('\u0000', menuItem1.getNumericShortcut());
      assertEquals(0, menuItem1.getGroupId());
      assertFalse(menuItem1.expandActionView());
      assertEquals(0, menuItem1.getOrder());
      assertFalse(menuItem1.isEnabled());
      assertEquals(0, menuItem1.getItemId());
      assertFalse(menuItem1.isCheckable());
      assertNotNull(menuItem1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((SubMenu) null).when(menu0).addSubMenu(anyInt());
      doReturn(0).when(menu0).size();
      doReturn((String) null).when(menu0).toString();
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      menuWrapper0.setGroupVisible(171, false);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      
      int int0 = menuWrapper0.size();
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertEquals(0, int0);
      
      Menu menu1 = menuWrapper0.unwrap();
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertFalse(menu1.hasVisibleItems());
      assertEquals(0, menu1.size());
      assertNotNull(menu1);
      assertSame(menu1, menu0);
      
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((MenuItem) null).when(menu0).add(anyInt() , anyInt() , anyInt() , anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      // Undeclared exception!
      try { 
        menuWrapper0.add(85, 983, 983, (-1994));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(menu0).size();
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      int int0 = menuWrapper0.size();
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      menuWrapper0.setGroupVisible(0, false);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent[] intentArray0 = new Intent[5];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      intentArray0[0] = intent0;
      intentArray0[1] = intent0;
      intentArray0[2] = intent0;
      intentArray0[3] = intent0;
      intentArray0[4] = intent0;
      // Undeclared exception!
      try { 
        menuWrapper0.addIntentOptions(0, 0, 0, componentName0, intentArray0, intent0, 1, (com.actionbarsherlock.view.MenuItem[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      menuWrapper0.setQwertyMode(false);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(menu0).toString();
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      Menu menu1 = menuWrapper0.unwrap();
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menu1.size());
      assertFalse(menu1.hasVisibleItems());
      assertNotNull(menu1);
      assertSame(menu1, menu0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((SubMenu) null).when(menu0).addSubMenu(anyInt() , anyInt() , anyInt() , anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu(0, 1, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((MenuItem) null).when(menu0).add(anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      // Undeclared exception!
      try { 
        menuWrapper0.add(1467);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MenuWrapper menuWrapper0 = new MenuWrapper((Menu) null);
      assertNotNull(menuWrapper0);
      
      // Undeclared exception!
      try { 
        menuWrapper0.add(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((SubMenu) null).when(menu0).addSubMenu(anyInt() , anyInt() , anyInt() , any(java.lang.CharSequence.class));
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      int int0 = 480;
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu(480, 480, 480, charSequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((MenuItem) null).when(menu0).add(anyInt() , anyInt() , anyInt() , anyInt());
      doReturn((MenuItem) null).when(menu0).getItem(anyInt());
      doReturn(false).when(menu0).hasVisibleItems();
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      com.actionbarsherlock.view.MenuItem menuItem0 = menuWrapper0.getItem(2838);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNull(menuItem0);
      
      boolean boolean0 = menuWrapper0.hasVisibleItems();
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        menuWrapper0.add(2838, 362, 0, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MenuWrapper menuWrapper0 = new MenuWrapper((Menu) null);
      assertNotNull(menuWrapper0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        menuWrapper0.add(0, (-1305), 0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      menuWrapper0.close();
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MenuWrapper menuWrapper0 = new MenuWrapper((Menu) null);
      assertNotNull(menuWrapper0);
      
      // Undeclared exception!
      try { 
        menuWrapper0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MenuWrapper menuWrapper0 = new MenuWrapper((Menu) null);
      assertNotNull(menuWrapper0);
      
      int int0 = (-451);
      // Undeclared exception!
      try { 
        menuWrapper0.add((-451));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((SubMenu) null).when(menu0).addSubMenu(anyInt() , anyInt() , anyInt() , any(java.lang.CharSequence.class));
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu((-1400), (-1400), 101, (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
      assertNotNull(menuWrapper0);
      
      menuWrapper0.removeGroup(1956);
      assertEquals(0, menuWrapper0.size());
      assertFalse(menuWrapper0.hasVisibleItems());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((SubMenu) null).when(menu0).addSubMenu(anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      assertFalse(menuWrapper0.hasVisibleItems());
      assertEquals(0, menuWrapper0.size());
      assertNotNull(menuWrapper0);
      
      int int0 = (-607);
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu((-607));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((MenuItem) null).when(menu0).add(anyInt() , anyInt() , anyInt() , any(java.lang.CharSequence.class));
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      int int0 = 0;
      menuWrapper0.setGroupCheckable(0, false, false);
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent[] intentArray0 = new Intent[6];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      intentArray0[0] = intent0;
      intentArray0[1] = intent0;
      intentArray0[2] = intent0;
      intentArray0[3] = intent0;
      intentArray0[4] = intent0;
      intentArray0[5] = intent0;
      int int1 = 1102;
      com.actionbarsherlock.view.MenuItem[] menuItemArray0 = new com.actionbarsherlock.view.MenuItem[2];
      // Undeclared exception!
      try { 
        menuWrapper0.add(0, 32, 536870912, (CharSequence) "android.intent.action.MEDIA_UNMOUNTABLE");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MenuWrapper menuWrapper0 = new MenuWrapper((Menu) null);
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      menuWrapper0.setGroupCheckable(0, true, false);
      assertEquals(0, menuWrapper0.size());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((SubMenu) null).when(menu0).addSubMenu(anyInt() , anyInt() , anyInt() , anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      int int0 = 1818;
      menuWrapper0.setGroupEnabled(1818, false);
      int int1 = (-603);
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu((-603), (-603), 1818, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(menu0).addIntentOptions(anyInt() , anyInt() , anyInt() , any(android.content.ComponentName.class) , any(android.content.Intent[].class) , any(android.content.Intent.class) , anyInt() , any(android.view.MenuItem[].class));
      doReturn((MenuItem) null).when(menu0).findItem(anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent[] intentArray0 = new Intent[8];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      intentArray0[0] = intent0;
      intentArray0[1] = intent0;
      intentArray0[2] = intent0;
      intentArray0[3] = intent0;
      intentArray0[4] = intent0;
      intentArray0[5] = intent0;
      intentArray0[6] = intent0;
      intentArray0[7] = intent0;
      com.actionbarsherlock.view.MenuItem[] menuItemArray0 = new com.actionbarsherlock.view.MenuItem[0];
      menuWrapper0.findItem(72);
      menuWrapper0.addIntentOptions(153, 0, 153, componentName0, intentArray0, intent0, 8, menuItemArray0);
      menuWrapper0.clear();
      assertEquals(0, menuWrapper0.size());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(menu0).isShortcutKey(anyInt() , any(android.view.KeyEvent.class));
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      KeyEvent keyEvent0 = mock(KeyEvent.class, new ViolatedAssumptionAnswer());
      menuWrapper0.isShortcutKey(0, keyEvent0);
      menuWrapper0.setGroupEnabled(189, true);
      assertFalse(menuWrapper0.hasVisibleItems());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((SubMenu) null).when(menu0).addSubMenu(anyInt() , anyInt() , anyInt() , anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu(0, 0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((SubMenu) null).when(menu0).addSubMenu(any(java.lang.CharSequence.class));
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu(charSequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      menuWrapper0.removeGroup(1956);
      assertFalse(menuWrapper0.hasVisibleItems());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0).when(menu0).add(anyInt());
      doReturn((SubMenu) null).when(menu0).addSubMenu(any(java.lang.CharSequence.class));
      doReturn((-617)).when(menu0).size();
      doReturn("android.intent.action.TIMEZONE_CHANGED").when(menu0).toString();
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      int int0 = 171;
      menuWrapper0.setGroupVisible(171, false);
      menuWrapper0.size();
      menuWrapper0.unwrap();
      menuWrapper0.add((-69));
      int int1 = (-1466);
      int int2 = 1;
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu((CharSequence) "android.intent.action.TIMEZONE_CHANGED");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0).when(menu0).add(anyInt() , anyInt() , anyInt() , any(java.lang.CharSequence.class));
      doReturn(false).when(menu0).hasVisibleItems();
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      menuWrapper0.clear();
      menuWrapper0.add((-388), (-388), (-388), charSequence0);
      boolean boolean0 = menuWrapper0.hasVisibleItems();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(menu0).isShortcutKey(anyInt() , any(android.view.KeyEvent.class));
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      KeyEvent keyEvent0 = mock(KeyEvent.class, new ViolatedAssumptionAnswer());
      menuWrapper0.isShortcutKey(2730, keyEvent0);
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      com.actionbarsherlock.view.MenuItem[] menuItemArray0 = new com.actionbarsherlock.view.MenuItem[9];
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      SubMenu subMenu0 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0, menuItem0).when(subMenu0).getItem();
      SubMenu subMenu1 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(subMenu0).when(menu0).addSubMenu(anyInt());
      doReturn(false).when(menu0).performIdentifierAction(anyInt() , anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      menuWrapper0.removeItem(0);
      menuWrapper0.performIdentifierAction((-4300), (-4300));
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      menuWrapper0.addSubMenu(0);
      menuWrapper0.removeItem(224);
      assertFalse(menuWrapper0.hasVisibleItems());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      SubMenu subMenu0 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      MenuItem menuItem1 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0).when(menu0).add(anyInt() , anyInt() , anyInt() , anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      menuWrapper0.add(2, 1594, 2, 1594);
      menuWrapper0.clear();
      menuWrapper0.setGroupEnabled(1594, true);
      com.actionbarsherlock.view.MenuItem menuItem2 = menuWrapper0.findItem(menuItem1);
      assertFalse(menuItem2.hasSubMenu());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0).when(menu0).add(anyInt() , anyInt() , anyInt() , any(java.lang.CharSequence.class));
      doReturn(0).when(menu0).addIntentOptions(anyInt() , anyInt() , anyInt() , any(android.content.ComponentName.class) , any(android.content.Intent[].class) , any(android.content.Intent.class) , anyInt() , any(android.view.MenuItem[].class));
      doReturn((MenuItem) null).when(menu0).findItem(anyInt());
      doReturn(menuItem0).when(menu0).getItem(anyInt());
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      menuWrapper0.clear();
      com.actionbarsherlock.view.MenuItem menuItem1 = menuWrapper0.getItem(0);
      ComponentName componentName0 = mock(ComponentName.class, new ViolatedAssumptionAnswer());
      Intent[] intentArray0 = new Intent[9];
      Intent intent0 = mock(Intent.class, new ViolatedAssumptionAnswer());
      intentArray0[0] = intent0;
      intentArray0[1] = intent0;
      intentArray0[2] = intent0;
      intentArray0[3] = intent0;
      intentArray0[4] = intent0;
      intentArray0[5] = intent0;
      intentArray0[6] = intent0;
      intentArray0[7] = intent0;
      intentArray0[8] = intent0;
      com.actionbarsherlock.view.MenuItem[] menuItemArray0 = new com.actionbarsherlock.view.MenuItem[8];
      menuItemArray0[0] = menuItem1;
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      com.actionbarsherlock.view.MenuItem menuItem2 = menuWrapper0.add(536870912, 0, 0, charSequence0);
      menuItemArray0[1] = menuItem2;
      menuItemArray0[2] = menuItem1;
      menuItemArray0[3] = menuItem1;
      menuItemArray0[4] = menuItem1;
      menuWrapper0.findItem((-65536));
      menuItemArray0[5] = null;
      menuItemArray0[6] = menuItem1;
      menuItemArray0[7] = menuItem1;
      // Undeclared exception!
      try { 
        menuWrapper0.addIntentOptions(0, 0, 0, componentName0, intentArray0, intent0, 32768, menuItemArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      SubMenu subMenu0 = mock(SubMenu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0, menuItem0).when(subMenu0).getItem();
      MenuItem menuItem1 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(subMenu0, (SubMenu) null).when(menu0).addSubMenu(anyInt() , anyInt() , anyInt() , anyInt());
      doReturn(menuItem1).when(menu0).findItem(anyInt());
      doReturn(false).when(menu0).performShortcut(anyInt() , any(android.view.KeyEvent.class) , anyInt());
      doReturn(0).when(menu0).size();
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      menuWrapper0.removeItem(1);
      menuWrapper0.removeItem(0);
      menuWrapper0.findItem(117);
      menuWrapper0.addSubMenu(0, 0, 1, (-4714));
      KeyEvent keyEvent0 = mock(KeyEvent.class, new ViolatedAssumptionAnswer());
      menuWrapper0.performShortcut(0, keyEvent0, 51);
      menuWrapper0.size();
      // Undeclared exception!
      try { 
        menuWrapper0.addSubMenu(129, 0, 4174, (-980));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn(menuItem0).when(menu0).findItem(anyInt());
      doReturn(menuItem0).when(menu0).getItem(anyInt());
      doReturn("").when(menu0).toString();
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      menuWrapper0.findItem(2211);
      menuWrapper0.getItem(0);
      menuWrapper0.setQwertyMode(false);
      Menu menu1 = menuWrapper0.unwrap();
      assertEquals(0, menu1.size());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MenuItem menuItem0 = mock(MenuItem.class, new ViolatedAssumptionAnswer());
      Menu menu0 = mock(Menu.class, new ViolatedAssumptionAnswer());
      doReturn((MenuItem) null).when(menu0).add(any(java.lang.CharSequence.class));
      MenuWrapper menuWrapper0 = new MenuWrapper(menu0);
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        menuWrapper0.add(charSequence0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Wrapped menu item cannot be null.
         //
         verifyException("com.actionbarsherlock.internal.view.menu.MenuItemWrapper", e);
      }
  }
}
